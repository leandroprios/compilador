// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/main/java/edu/unnoba/compiladores/compilador_unnoba_2023/lexicoCup.flex

/* JFlex example: partial Java language lexer specification */
package edu.unnoba.compiladores.compilador_unnoba_2023;

import java.util.ArrayList;
import java_cup.runtime.*;
import java_cup.sym;

/**
 * This class is a simple example lexer.
 */

@SuppressWarnings("fallthrough")
public class MiLexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int Comentario = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  3,  3,  4,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     1,  5,  6,  7,  0,  0,  0,  0,  8,  9, 10, 11, 12, 13, 14, 15, 
    16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 18, 19, 20, 21,  0, 
     0, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 
    37, 31, 38, 39, 40, 41, 31, 31, 31, 42, 31, 43, 44, 45,  0, 46, 
     0, 47, 48, 49, 50, 51, 52, 31, 53, 54, 31, 55, 56, 31, 57, 58, 
    59, 31, 60, 61, 62, 63, 31, 31, 31, 64, 31, 65, 66, 67,  0,  0, 
     0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     1,  0,  0,  0,  0,  0,  0,  0,  0,  0, 68,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0, 68,  0,  0,  0,  0, 68,  0,  0,  0,  0,  0, 
    68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
    68, 68, 68, 68, 68, 68, 68,  0, 68, 68, 68, 68, 68, 68, 68, 68, 
    68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
    68, 68, 68, 68, 68, 68, 68,  0, 68, 68, 68, 68, 68, 68, 68, 68
  };

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\1\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\14\22\1\23\1\24\1\25"+
    "\12\22\1\26\1\27\1\30\1\31\1\32\3\33\1\0"+
    "\1\34\2\4\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\7\22\1\43\6\22\1\44\2\22\1\45\22\22\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\22\1\54\7\22"+
    "\1\55\3\22\1\56\1\22\1\57\1\60\11\22\1\55"+
    "\14\22\1\61\1\62\6\22\1\63\1\64\11\22\1\65"+
    "\6\22\1\66\16\22\1\67\7\22\1\70\2\22\1\71"+
    "\13\22\1\72\1\0\5\22\1\0\4\22\1\0\4\22"+
    "\1\73\1\0\3\22\1\0\4\22\1\0\3\22\3\0"+
    "\1\22\1\74\1\0\2\22\3\0\1\22\1\0\2\22"+
    "\3\0\1\75\1\0\1\22\4\0\1\22\1\76\2\0"+
    "\1\77\1\22\2\0\1\22\2\0\1\22\1\100\1\101"+
    "\40\22";

  private static int [] zzUnpackAction() {
    int [] result = new int[313];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\317\0\u0114\0\u0159\0\317"+
    "\0\u019e\0\u01e3\0\317\0\u0228\0\317\0\317\0\317\0\u026d"+
    "\0\317\0\u02b2\0\317\0\317\0\u02f7\0\u033c\0\u0381\0\u03c6"+
    "\0\u040b\0\u0450\0\u0495\0\u04da\0\u051f\0\u0564\0\u05a9\0\u05ee"+
    "\0\u0633\0\u0678\0\u06bd\0\317\0\317\0\317\0\u0702\0\u0747"+
    "\0\u078c\0\u07d1\0\u0816\0\u085b\0\u08a0\0\u08e5\0\u092a\0\u096f"+
    "\0\317\0\317\0\317\0\317\0\u09b4\0\317\0\u09f9\0\u0a3e"+
    "\0\u0a83\0\317\0\317\0\u0ac8\0\317\0\317\0\u026d\0\317"+
    "\0\317\0\317\0\u0b0d\0\u0b52\0\u0b97\0\u0bdc\0\u0c21\0\u0c66"+
    "\0\u0cab\0\u0564\0\u0cf0\0\u0d35\0\u0d7a\0\u0dbf\0\u0e04\0\u0e49"+
    "\0\u0564\0\u0e8e\0\u0ed3\0\u0564\0\u0f18\0\u0f5d\0\u0fa2\0\u0fe7"+
    "\0\u102c\0\u1071\0\u10b6\0\u10fb\0\u1140\0\u1185\0\u11ca\0\u120f"+
    "\0\u1254\0\u1299\0\u12de\0\u1323\0\u1368\0\u13ad\0\317\0\317"+
    "\0\317\0\317\0\317\0\317\0\u13f2\0\u0564\0\u1437\0\u147c"+
    "\0\u14c1\0\u1506\0\u154b\0\u1590\0\u15d5\0\u161a\0\u165f\0\u16a4"+
    "\0\u16e9\0\u0564\0\u172e\0\u0564\0\u0564\0\u1773\0\u17b8\0\u17fd"+
    "\0\u1842\0\u1887\0\u18cc\0\u1911\0\u1956\0\u199b\0\u0564\0\u19e0"+
    "\0\u1a25\0\u1a6a\0\u1aaf\0\u1af4\0\u1b39\0\u1b7e\0\u1bc3\0\u1c08"+
    "\0\u1c4d\0\u1c92\0\u1cd7\0\u0564\0\u0564\0\u1d1c\0\u1d61\0\u1da6"+
    "\0\u1deb\0\u1e30\0\u1e75\0\u0564\0\u0564\0\u1eba\0\u1eff\0\u1f44"+
    "\0\u1f89\0\u1fce\0\u2013\0\u2058\0\u209d\0\u20e2\0\u0564\0\u2127"+
    "\0\u216c\0\u21b1\0\u21f6\0\u223b\0\u2280\0\u0564\0\u22c5\0\u230a"+
    "\0\u234f\0\u2394\0\u23d9\0\u241e\0\u2463\0\u24a8\0\u24ed\0\u2532"+
    "\0\u2577\0\u25bc\0\u2601\0\u2646\0\u0564\0\u268b\0\u26d0\0\u2715"+
    "\0\u275a\0\u279f\0\u27e4\0\u2829\0\u0564\0\u286e\0\u28b3\0\u0564"+
    "\0\u28f8\0\u293d\0\u2982\0\u29c7\0\u2a0c\0\u2a51\0\u2a96\0\u2adb"+
    "\0\u2b20\0\u2b65\0\u2baa\0\u0564\0\u2bef\0\u2c34\0\u2c79\0\u2cbe"+
    "\0\u2d03\0\u2d48\0\u2d8d\0\u2dd2\0\u2e17\0\u2e5c\0\u2ea1\0\u2ee6"+
    "\0\u2f2b\0\u2f70\0\u2fb5\0\u2ffa\0\u209d\0\u303f\0\u3084\0\u30c9"+
    "\0\u310e\0\u3153\0\u3198\0\u31dd\0\u3222\0\u3267\0\u32ac\0\u32f1"+
    "\0\u3336\0\u337b\0\u33c0\0\u3405\0\u344a\0\u348f\0\u2829\0\u34d4"+
    "\0\u3519\0\u355e\0\u35a3\0\u35e8\0\u362d\0\u3672\0\u36b7\0\u36fc"+
    "\0\u3741\0\u3786\0\u37cb\0\u3810\0\u2ea1\0\u3855\0\u389a\0\u38df"+
    "\0\u3924\0\u3969\0\u39ae\0\u39f3\0\317\0\u3a38\0\u3a7d\0\317"+
    "\0\u3ac2\0\u3b07\0\u3b4c\0\u3b91\0\u3bd6\0\u3c1b\0\u3c60\0\317"+
    "\0\317\0\u3ca5\0\u3cea\0\u3d2f\0\u3d74\0\u3db9\0\u3dfe\0\u3e43"+
    "\0\u3e88\0\u3ecd\0\u3f12\0\u3f57\0\u3f9c\0\u3fe1\0\u4026\0\u406b"+
    "\0\u40b0\0\u40f5\0\u413a\0\u417f\0\u41c4\0\u4209\0\u424e\0\u4293"+
    "\0\u42d8\0\u431d\0\u4362\0\u43a7\0\u43ec\0\u4431\0\u4476\0\u44bb"+
    "\0\317";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[313];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\3\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\2\36\1\37\4\36\1\40\1\41\1\42"+
    "\2\36\1\43\2\36\1\44\1\4\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\36\1\55\2\36"+
    "\1\56\1\57\3\36\1\60\2\36\1\61\1\36\1\62"+
    "\1\4\6\63\1\64\45\63\1\65\30\63\10\66\1\67"+
    "\1\66\1\70\72\66\107\0\1\71\126\0\1\72\60\0"+
    "\2\11\1\73\1\0\1\74\100\11\12\0\1\75\103\0"+
    "\1\76\113\0\1\77\102\0\1\77\1\0\1\22\110\0"+
    "\1\100\104\0\1\101\104\0\1\102\100\0\1\103\5\0"+
    "\15\36\1\104\7\36\3\0\1\103\22\36\1\0\1\36"+
    "\1\0\1\103\20\0\1\103\5\0\16\36\1\105\1\36"+
    "\1\106\4\36\3\0\1\103\22\36\1\0\1\36\1\0"+
    "\1\103\20\0\1\103\5\0\16\36\1\107\6\36\3\0"+
    "\1\103\22\36\1\0\1\36\1\0\1\103\20\0\1\103"+
    "\5\0\4\36\1\110\3\36\1\111\5\36\1\112\6\36"+
    "\3\0\1\103\22\36\1\0\1\36\1\0\1\103\20\0"+
    "\1\103\5\0\13\36\1\113\1\36\1\114\7\36\3\0"+
    "\1\103\22\36\1\0\1\36\1\0\1\103\20\0\1\103"+
    "\5\0\1\115\7\36\1\116\2\36\1\117\2\36\1\120"+
    "\6\36\3\0\1\103\22\36\1\0\1\36\1\0\1\103"+
    "\20\0\1\103\5\0\25\36\3\0\1\103\22\36\1\0"+
    "\1\36\1\0\1\103\20\0\1\103\5\0\5\36\1\121"+
    "\7\36\1\122\7\36\3\0\1\103\22\36\1\0\1\36"+
    "\1\0\1\103\20\0\1\103\5\0\16\36\1\123\6\36"+
    "\3\0\1\103\22\36\1\0\1\36\1\0\1\103\20\0"+
    "\1\103\5\0\20\36\1\124\4\36\3\0\1\103\22\36"+
    "\1\0\1\36\1\0\1\103\20\0\1\103\5\0\20\36"+
    "\1\125\4\36\3\0\1\103\22\36\1\0\1\36\1\0"+
    "\1\103\20\0\1\103\5\0\7\36\1\126\10\36\1\127"+
    "\4\36\3\0\1\103\22\36\1\0\1\36\1\0\1\103"+
    "\20\0\1\103\5\0\25\36\3\0\1\103\12\36\1\130"+
    "\7\36\1\0\1\36\1\0\1\103\20\0\1\103\5\0"+
    "\25\36\3\0\1\103\13\36\1\131\1\36\1\132\4\36"+
    "\1\0\1\36\1\0\1\103\20\0\1\103\5\0\25\36"+
    "\3\0\1\103\13\36\1\133\6\36\1\0\1\36\1\0"+
    "\1\103\20\0\1\103\5\0\25\36\3\0\1\103\7\36"+
    "\1\134\3\36\1\112\6\36\1\0\1\36\1\0\1\103"+
    "\20\0\1\103\5\0\25\36\3\0\1\103\11\36\1\135"+
    "\1\136\7\36\1\0\1\36\1\0\1\103\20\0\1\103"+
    "\5\0\25\36\3\0\1\103\1\137\6\36\1\140\1\36"+
    "\1\141\1\36\1\142\6\36\1\0\1\36\1\0\1\103"+
    "\20\0\1\103\5\0\25\36\3\0\1\103\5\36\1\121"+
    "\4\36\1\143\7\36\1\0\1\36\1\0\1\103\20\0"+
    "\1\103\5\0\25\36\3\0\1\103\13\36\1\144\6\36"+
    "\1\0\1\36\1\0\1\103\20\0\1\103\5\0\25\36"+
    "\3\0\1\103\15\36\1\124\4\36\1\0\1\36\1\0"+
    "\1\103\20\0\1\103\5\0\25\36\3\0\1\103\6\36"+
    "\1\145\6\36\1\146\4\36\1\0\1\36\1\0\1\103"+
    "\6\0\1\147\62\0\1\150\2\0\1\151\1\0\1\152"+
    "\20\0\1\153\103\0\1\154\176\0\1\5\3\0\1\73"+
    "\122\0\1\155\5\0\25\155\3\0\23\155\3\0\1\155"+
    "\20\0\1\103\5\0\3\36\1\156\21\36\3\0\1\103"+
    "\22\36\1\0\1\36\1\0\1\103\20\0\1\103\5\0"+
    "\16\36\1\157\6\36\3\0\1\103\22\36\1\0\1\36"+
    "\1\0\1\103\20\0\1\103\5\0\4\36\1\160\20\36"+
    "\3\0\1\103\22\36\1\0\1\36\1\0\1\103\20\0"+
    "\1\103\5\0\15\36\1\161\7\36\3\0\1\103\22\36"+
    "\1\0\1\36\1\0\1\103\20\0\1\103\5\0\2\36"+
    "\1\162\22\36\3\0\1\103\22\36\1\0\1\36\1\0"+
    "\1\103\20\0\1\103\5\0\21\36\1\163\3\36\3\0"+
    "\1\103\22\36\1\0\1\36\1\0\1\103\20\0\1\103"+
    "\5\0\10\36\1\164\10\36\1\165\3\36\3\0\1\103"+
    "\22\36\1\0\1\36\1\0\1\103\20\0\1\103\5\0"+
    "\3\36\1\166\21\36\3\0\1\103\22\36\1\0\1\36"+
    "\1\0\1\103\20\0\1\103\5\0\13\36\1\167\11\36"+
    "\3\0\1\103\22\36\1\0\1\36\1\0\1\103\20\0"+
    "\1\103\5\0\13\36\1\170\11\36\3\0\1\103\22\36"+
    "\1\0\1\36\1\0\1\103\20\0\1\103\5\0\16\36"+
    "\1\171\6\36\3\0\1\103\22\36\1\0\1\36\1\0"+
    "\1\103\20\0\1\103\5\0\20\36\1\172\4\36\3\0"+
    "\1\103\22\36\1\0\1\36\1\0\1\103\20\0\1\103"+
    "\5\0\17\36\1\173\2\36\1\174\2\36\3\0\1\103"+
    "\22\36\1\0\1\36\1\0\1\103\20\0\1\103\5\0"+
    "\22\36\1\175\2\36\3\0\1\103\22\36\1\0\1\36"+
    "\1\0\1\103\20\0\1\103\5\0\16\36\1\176\6\36"+
    "\3\0\1\103\22\36\1\0\1\36\1\0\1\103\20\0"+
    "\1\103\5\0\4\36\1\177\20\36\3\0\1\103\22\36"+
    "\1\0\1\36\1\0\1\103\20\0\1\103\5\0\23\36"+
    "\1\200\1\36\3\0\1\103\22\36\1\0\1\36\1\0"+
    "\1\103\20\0\1\103\5\0\25\36\3\0\1\103\3\36"+
    "\1\156\16\36\1\0\1\36\1\0\1\103\20\0\1\103"+
    "\5\0\25\36\3\0\1\103\13\36\1\201\6\36\1\0"+
    "\1\36\1\0\1\103\20\0\1\103\5\0\25\36\3\0"+
    "\1\103\4\36\1\202\15\36\1\0\1\36\1\0\1\103"+
    "\20\0\1\103\5\0\25\36\3\0\1\103\12\36\1\203"+
    "\7\36\1\0\1\36\1\0\1\103\20\0\1\103\5\0"+
    "\25\36\3\0\1\103\16\36\1\204\3\36\1\0\1\36"+
    "\1\0\1\103\20\0\1\103\5\0\25\36\3\0\1\103"+
    "\7\36\1\205\6\36\1\206\3\36\1\0\1\36\1\0"+
    "\1\103\20\0\1\103\5\0\25\36\3\0\1\103\3\36"+
    "\1\207\16\36\1\0\1\36\1\0\1\103\20\0\1\103"+
    "\5\0\25\36\3\0\1\103\11\36\1\210\10\36\1\0"+
    "\1\36\1\0\1\103\20\0\1\103\5\0\25\36\3\0"+
    "\1\103\11\36\1\211\10\36\1\0\1\36\1\0\1\103"+
    "\20\0\1\103\5\0\25\36\3\0\1\103\13\36\1\212"+
    "\6\36\1\0\1\36\1\0\1\103\20\0\1\103\5\0"+
    "\25\36\3\0\1\103\15\36\1\172\4\36\1\0\1\36"+
    "\1\0\1\103\20\0\1\103\5\0\25\36\3\0\1\103"+
    "\14\36\1\213\2\36\1\174\2\36\1\0\1\36\1\0"+
    "\1\103\20\0\1\103\5\0\25\36\3\0\1\103\17\36"+
    "\1\175\2\36\1\0\1\36\1\0\1\103\20\0\1\103"+
    "\5\0\25\36\3\0\1\103\4\36\1\214\15\36\1\0"+
    "\1\36\1\0\1\103\20\0\1\103\5\0\25\36\3\0"+
    "\1\103\20\36\1\215\1\36\1\0\1\36\1\0\1\103"+
    "\20\0\1\216\5\0\25\216\3\0\23\216\3\0\1\216"+
    "\20\0\1\103\5\0\13\36\1\217\11\36\3\0\1\103"+
    "\22\36\1\0\1\36\1\0\1\103\20\0\1\103\5\0"+
    "\1\220\24\36\3\0\1\103\22\36\1\0\1\36\1\0"+
    "\1\103\20\0\1\103\5\0\22\36\1\221\2\36\3\0"+
    "\1\103\22\36\1\0\1\36\1\0\1\103\20\0\1\103"+
    "\5\0\13\36\1\222\11\36\3\0\1\103\22\36\1\0"+
    "\1\36\1\0\1\103\20\0\1\103\5\0\17\36\1\223"+
    "\5\36\3\0\1\103\22\36\1\0\1\36\1\0\1\103"+
    "\20\0\1\103\5\0\5\36\1\224\17\36\3\0\1\103"+
    "\22\36\1\0\1\36\1\0\1\103\20\0\1\103\5\0"+
    "\4\36\1\225\20\36\3\0\1\103\22\36\1\0\1\36"+
    "\1\0\1\103\20\0\1\103\5\0\3\36\1\226\13\36"+
    "\1\227\5\36\3\0\1\103\22\36\1\0\1\36\1\0"+
    "\1\103\20\0\1\103\5\0\21\36\1\200\3\36\3\0"+
    "\1\103\22\36\1\0\1\36\1\0\1\103\20\0\1\103"+
    "\5\0\22\36\1\230\2\36\3\0\1\103\22\36\1\0"+
    "\1\36\1\0\1\103\20\0\1\103\5\0\1\231\24\36"+
    "\3\0\1\103\22\36\1\0\1\36\1\0\1\103\20\0"+
    "\1\103\5\0\23\36\1\232\1\36\3\0\1\103\22\36"+
    "\1\0\1\36\1\0\1\103\20\0\1\103\5\0\6\36"+
    "\1\233\16\36\3\0\1\103\22\36\1\0\1\36\1\0"+
    "\1\103\20\0\1\103\5\0\15\36\1\234\7\36\3\0"+
    "\1\103\22\36\1\0\1\36\1\0\1\103\20\0\1\103"+
    "\5\0\4\36\1\235\20\36\3\0\1\103\22\36\1\0"+
    "\1\36\1\0\1\103\20\0\1\103\5\0\25\36\3\0"+
    "\1\103\11\36\1\236\10\36\1\0\1\36\1\0\1\103"+
    "\20\0\1\103\5\0\25\36\3\0\1\103\1\237\21\36"+
    "\1\0\1\36\1\0\1\103\20\0\1\103\5\0\25\36"+
    "\3\0\1\103\17\36\1\240\2\36\1\0\1\36\1\0"+
    "\1\103\20\0\1\103\5\0\25\36\3\0\1\103\14\36"+
    "\1\241\5\36\1\0\1\36\1\0\1\103\20\0\1\103"+
    "\5\0\25\36\3\0\1\103\5\36\1\224\14\36\1\0"+
    "\1\36\1\0\1\103\20\0\1\103\5\0\25\36\3\0"+
    "\1\103\4\36\1\225\15\36\1\0\1\36\1\0\1\103"+
    "\20\0\1\103\5\0\25\36\3\0\1\103\16\36\1\215"+
    "\3\36\1\0\1\36\1\0\1\103\20\0\1\103\5\0"+
    "\25\36\3\0\1\103\17\36\1\242\2\36\1\0\1\36"+
    "\1\0\1\103\20\0\1\103\5\0\25\36\3\0\1\103"+
    "\1\243\21\36\1\0\1\36\1\0\1\103\20\0\1\103"+
    "\5\0\25\36\3\0\1\103\20\36\1\244\1\36\1\0"+
    "\1\36\1\0\1\103\20\0\1\103\5\0\25\36\3\0"+
    "\1\103\12\36\1\234\7\36\1\0\1\36\1\0\1\103"+
    "\20\0\1\103\5\0\25\36\3\0\1\103\4\36\1\235"+
    "\15\36\1\0\1\36\1\0\1\103\20\0\1\245\5\0"+
    "\25\245\3\0\23\245\3\0\1\245\20\0\1\103\5\0"+
    "\4\36\1\246\20\36\3\0\1\103\22\36\1\0\1\36"+
    "\1\0\1\103\20\0\1\103\5\0\12\36\1\247\12\36"+
    "\3\0\1\103\22\36\1\0\1\36\1\0\1\103\20\0"+
    "\1\103\5\0\10\36\1\250\14\36\3\0\1\103\22\36"+
    "\1\0\1\36\1\0\1\103\20\0\1\103\5\0\1\251"+
    "\24\36\3\0\1\103\22\36\1\0\1\36\1\0\1\103"+
    "\20\0\1\103\5\0\13\36\1\252\11\36\3\0\1\103"+
    "\22\36\1\0\1\36\1\0\1\103\20\0\1\103\5\0"+
    "\4\36\1\253\20\36\3\0\1\103\22\36\1\0\1\36"+
    "\1\0\1\103\20\0\1\103\5\0\20\36\1\254\4\36"+
    "\3\0\1\103\22\36\1\0\1\36\1\0\1\103\20\0"+
    "\1\103\5\0\4\36\1\255\20\36\3\0\1\103\22\36"+
    "\1\0\1\36\1\0\1\103\20\0\1\103\5\0\22\36"+
    "\1\256\2\36\3\0\1\103\22\36\1\0\1\36\1\0"+
    "\1\103\20\0\1\103\5\0\22\36\1\257\2\36\3\0"+
    "\1\103\22\36\1\0\1\36\1\0\1\103\20\0\1\103"+
    "\5\0\20\36\1\260\4\36\3\0\1\103\22\36\1\0"+
    "\1\36\1\0\1\103\20\0\1\103\5\0\25\36\3\0"+
    "\1\103\4\36\1\261\15\36\1\0\1\36\1\0\1\103"+
    "\20\0\1\103\5\0\25\36\3\0\1\103\10\36\1\247"+
    "\11\36\1\0\1\36\1\0\1\103\20\0\1\103\5\0"+
    "\25\36\3\0\1\103\7\36\1\262\12\36\1\0\1\36"+
    "\1\0\1\103\20\0\1\103\5\0\25\36\3\0\1\103"+
    "\11\36\1\263\10\36\1\0\1\36\1\0\1\103\20\0"+
    "\1\103\5\0\25\36\3\0\1\103\4\36\1\264\15\36"+
    "\1\0\1\36\1\0\1\103\20\0\1\103\5\0\25\36"+
    "\3\0\1\103\17\36\1\256\2\36\1\0\1\36\1\0"+
    "\1\103\20\0\1\103\5\0\25\36\3\0\1\103\17\36"+
    "\1\265\2\36\1\0\1\36\1\0\1\103\20\0\1\266"+
    "\5\0\25\266\3\0\23\266\3\0\1\266\20\0\1\103"+
    "\5\0\1\267\24\36\3\0\1\103\22\36\1\0\1\36"+
    "\1\0\1\103\20\0\1\103\5\0\15\36\1\270\7\36"+
    "\3\0\1\103\22\36\1\0\1\36\1\0\1\103\20\0"+
    "\1\103\5\0\20\36\1\271\4\36\3\0\1\103\22\36"+
    "\1\0\1\36\1\0\1\103\20\0\1\103\5\0\1\272"+
    "\24\36\3\0\1\103\22\36\1\0\1\36\1\0\1\103"+
    "\20\0\1\103\5\0\2\36\1\273\22\36\3\0\1\103"+
    "\22\36\1\0\1\36\1\0\1\103\20\0\1\103\5\0"+
    "\16\36\1\274\6\36\3\0\1\103\22\36\1\0\1\36"+
    "\1\0\1\103\20\0\1\103\5\0\20\36\1\275\4\36"+
    "\3\0\1\103\22\36\1\0\1\36\1\0\1\103\20\0"+
    "\1\103\5\0\25\36\3\0\1\276\22\36\1\0\1\36"+
    "\1\0\1\103\20\0\1\103\5\0\1\277\24\36\3\0"+
    "\1\103\22\36\1\0\1\36\1\0\1\103\20\0\1\103"+
    "\5\0\25\36\3\0\1\103\1\300\21\36\1\0\1\36"+
    "\1\0\1\103\20\0\1\103\5\0\25\36\3\0\1\103"+
    "\12\36\1\301\7\36\1\0\1\36\1\0\1\103\20\0"+
    "\1\103\5\0\25\36\3\0\1\103\1\302\21\36\1\0"+
    "\1\36\1\0\1\103\20\0\1\103\5\0\25\36\3\0"+
    "\1\103\15\36\1\275\4\36\1\0\1\36\1\0\1\103"+
    "\20\0\1\103\5\0\25\36\3\0\1\303\22\36\1\0"+
    "\1\36\1\0\1\103\20\0\1\304\5\0\25\304\3\0"+
    "\23\304\3\0\1\304\20\0\1\103\5\0\15\36\1\305"+
    "\7\36\3\0\1\103\22\36\1\0\1\36\1\0\1\103"+
    "\20\0\1\103\5\0\23\36\1\306\1\36\3\0\1\103"+
    "\22\36\1\0\1\36\1\0\1\103\20\0\1\103\5\0"+
    "\4\36\1\307\20\36\3\0\1\103\22\36\1\0\1\36"+
    "\1\0\1\103\20\0\1\103\5\0\24\36\1\310\3\0"+
    "\1\103\22\36\1\0\1\36\1\0\1\103\20\0\1\103"+
    "\5\0\13\36\1\311\11\36\3\0\1\103\22\36\1\0"+
    "\1\36\1\0\1\103\20\0\1\103\5\0\6\36\1\312"+
    "\16\36\3\0\1\103\22\36\1\0\1\36\1\0\1\103"+
    "\20\0\1\155\5\0\1\155\1\313\3\155\1\314\2\155"+
    "\1\315\14\155\3\0\23\155\3\0\1\155\20\0\1\103"+
    "\5\0\14\36\1\316\10\36\3\0\1\103\22\36\1\0"+
    "\1\36\1\0\1\103\20\0\1\103\5\0\25\36\3\0"+
    "\1\103\12\36\1\305\7\36\1\0\1\36\1\0\1\103"+
    "\20\0\1\103\5\0\25\36\3\0\1\103\20\36\1\317"+
    "\1\36\1\0\1\36\1\0\1\103\20\0\1\103\5\0"+
    "\25\36\3\0\1\103\21\36\1\310\1\0\1\36\1\0"+
    "\1\103\20\0\1\155\5\0\25\155\3\0\2\155\1\320"+
    "\3\155\1\321\1\155\1\322\12\155\3\0\1\155\20\0"+
    "\1\323\5\0\25\323\3\0\23\323\3\0\1\323\20\0"+
    "\1\103\5\0\4\36\1\324\20\36\3\0\1\103\22\36"+
    "\1\0\1\36\1\0\1\103\16\0\1\325\1\0\1\103"+
    "\5\0\25\36\3\0\1\103\22\36\1\0\1\36\1\0"+
    "\1\103\20\0\1\103\5\0\1\326\24\36\3\0\1\103"+
    "\22\36\1\0\1\36\1\0\1\103\20\0\1\103\5\0"+
    "\20\36\1\327\4\36\3\0\1\103\22\36\1\0\1\36"+
    "\1\0\1\103\20\0\1\216\5\0\16\216\1\330\6\216"+
    "\3\0\23\216\3\0\1\216\20\0\1\216\5\0\13\216"+
    "\1\331\11\216\3\0\23\216\3\0\1\216\20\0\1\216"+
    "\5\0\15\216\1\332\7\216\3\0\23\216\3\0\1\216"+
    "\16\0\1\333\1\0\1\103\5\0\25\36\3\0\1\103"+
    "\22\36\1\0\1\36\1\0\1\103\20\0\1\103\5\0"+
    "\25\36\3\0\1\103\4\36\1\324\15\36\1\0\1\36"+
    "\1\0\1\103\20\0\1\216\5\0\25\216\3\0\14\216"+
    "\1\334\6\216\3\0\1\216\20\0\1\216\5\0\25\216"+
    "\3\0\12\216\1\335\10\216\3\0\1\216\20\0\1\216"+
    "\5\0\25\216\3\0\13\216\1\336\7\216\3\0\1\216"+
    "\20\0\1\337\5\0\25\337\3\0\23\337\3\0\1\337"+
    "\47\0\1\340\55\0\1\103\5\0\20\36\1\341\4\36"+
    "\3\0\1\103\22\36\1\0\1\36\1\0\1\103\20\0"+
    "\1\103\5\0\1\342\24\36\3\0\1\103\22\36\1\0"+
    "\1\36\1\0\1\103\20\0\1\245\5\0\16\245\1\343"+
    "\6\245\3\0\23\245\3\0\1\245\20\0\1\245\5\0"+
    "\16\245\1\344\6\245\3\0\23\245\3\0\1\245\20\0"+
    "\1\245\5\0\22\245\1\345\2\245\3\0\23\245\3\0"+
    "\1\245\47\0\1\346\55\0\1\245\5\0\25\245\3\0"+
    "\14\245\1\347\6\245\3\0\1\245\20\0\1\245\5\0"+
    "\25\245\3\0\14\245\1\350\6\245\3\0\1\245\20\0"+
    "\1\245\5\0\25\245\3\0\20\245\1\345\2\245\3\0"+
    "\1\245\20\0\1\351\5\0\25\351\3\0\23\351\3\0"+
    "\1\351\32\0\1\352\72\0\1\103\5\0\4\36\1\353"+
    "\20\36\3\0\1\103\22\36\1\0\1\36\1\0\1\103"+
    "\20\0\1\103\5\0\14\36\1\354\10\36\3\0\1\103"+
    "\22\36\1\0\1\36\1\0\1\103\20\0\1\266\5\0"+
    "\13\266\1\355\11\266\3\0\23\266\3\0\1\266\20\0"+
    "\1\266\5\0\1\356\24\266\3\0\23\266\3\0\1\266"+
    "\32\0\1\357\72\0\1\266\5\0\25\266\3\0\12\266"+
    "\1\360\10\266\3\0\1\266\20\0\1\266\5\0\25\266"+
    "\3\0\1\266\1\361\21\266\3\0\1\266\20\0\1\362"+
    "\5\0\25\362\3\0\23\362\3\0\1\362\30\0\1\363"+
    "\72\0\1\364\1\0\1\103\5\0\25\36\3\0\1\103"+
    "\22\36\1\0\1\36\1\0\1\103\16\0\1\365\1\0"+
    "\1\103\5\0\25\36\3\0\1\103\22\36\1\0\1\36"+
    "\1\0\1\103\20\0\1\304\5\0\4\304\1\366\20\304"+
    "\3\0\23\304\3\0\1\304\20\0\1\304\5\0\22\304"+
    "\1\367\2\304\3\0\23\304\3\0\1\304\30\0\1\370"+
    "\74\0\1\304\5\0\25\304\3\0\5\304\1\371\15\304"+
    "\3\0\1\304\20\0\1\304\5\0\25\304\3\0\20\304"+
    "\1\367\2\304\3\0\1\304\20\0\1\372\5\0\25\372"+
    "\3\0\23\372\3\0\1\372\50\0\1\373\103\0\1\374"+
    "\104\0\1\375\55\0\1\323\5\0\1\376\24\323\3\0"+
    "\23\323\3\0\1\323\50\0\1\377\54\0\1\323\5\0"+
    "\25\323\3\0\1\323\1\u0100\21\323\3\0\1\323\20\0"+
    "\1\u0101\5\0\25\u0101\3\0\23\u0101\3\0\1\u0101\36\0"+
    "\1\u0102\100\0\1\u0103\104\0\1\u0104\72\0\1\337\5\0"+
    "\15\337\1\u0105\7\337\3\0\23\337\3\0\1\337\36\0"+
    "\1\u0106\66\0\1\337\5\0\25\337\3\0\13\337\1\u0105"+
    "\7\337\3\0\1\337\20\0\1\u0107\5\0\25\u0107\3\0"+
    "\23\u0107\3\0\1\u0107\44\0\1\u0108\70\0\1\u0109\104\0"+
    "\1\u010a\120\0\1\u010b\60\0\1\u010c\5\0\25\u010c\3\0"+
    "\23\u010c\3\0\1\u010c\43\0\1\u010d\111\0\1\u010e\104\0"+
    "\1\u010f\77\0\1\u0110\61\0\1\u0111\5\0\25\u0111\3\0"+
    "\23\u0111\3\0\1\u0111\36\0\1\u0112\104\0\1\u0113\66\0"+
    "\1\u0114\5\0\25\u0114\3\0\23\u0114\3\0\1\u0114\44\0"+
    "\1\u0115\104\0\1\u0116\60\0\1\u0117\5\0\25\u0117\3\0"+
    "\23\u0117\3\0\1\u0117\43\0\1\u0118\104\0\1\u0119\61\0"+
    "\1\u011a\5\0\25\u011a\3\0\23\u011a\3\0\1\u011a\20\0"+
    "\1\u011b\5\0\25\u011b\3\0\23\u011b\3\0\1\u011b\20\0"+
    "\1\u011c\5\0\25\u011c\3\0\23\u011c\3\0\1\u011c\20\0"+
    "\1\u011d\5\0\25\u011d\3\0\23\u011d\3\0\1\u011d\20\0"+
    "\1\u011e\5\0\25\u011e\3\0\23\u011e\3\0\1\u011e\20\0"+
    "\1\u011f\5\0\25\u011f\3\0\23\u011f\3\0\1\u011f\20\0"+
    "\1\u0120\5\0\25\u0120\3\0\23\u0120\3\0\1\u0120\20\0"+
    "\1\u0121\5\0\25\u0121\3\0\23\u0121\3\0\1\u0121\20\0"+
    "\1\u0122\5\0\25\u0122\3\0\23\u0122\3\0\1\u0122\20\0"+
    "\1\u0123\5\0\25\u0123\3\0\23\u0123\3\0\1\u0123\20\0"+
    "\1\u0124\5\0\25\u0124\3\0\23\u0124\3\0\1\u0124\20\0"+
    "\1\u0125\5\0\25\u0125\3\0\23\u0125\3\0\1\u0125\20\0"+
    "\1\u0126\5\0\25\u0126\3\0\23\u0126\3\0\1\u0126\20\0"+
    "\1\u0127\5\0\25\u0127\3\0\23\u0127\3\0\1\u0127\20\0"+
    "\1\u0128\5\0\25\u0128\3\0\23\u0128\3\0\1\u0128\20\0"+
    "\1\u0129\5\0\25\u0129\3\0\23\u0129\3\0\1\u0129\20\0"+
    "\1\u012a\5\0\25\u012a\3\0\23\u012a\3\0\1\u012a\20\0"+
    "\1\u012b\5\0\25\u012b\3\0\23\u012b\3\0\1\u012b\20\0"+
    "\1\u012c\5\0\25\u012c\3\0\23\u012c\3\0\1\u012c\20\0"+
    "\1\u012d\5\0\25\u012d\3\0\23\u012d\3\0\1\u012d\20\0"+
    "\1\u012e\5\0\25\u012e\3\0\23\u012e\3\0\1\u012e\20\0"+
    "\1\u012f\5\0\25\u012f\3\0\23\u012f\3\0\1\u012f\20\0"+
    "\1\u0130\5\0\25\u0130\3\0\23\u0130\3\0\1\u0130\20\0"+
    "\1\u0131\5\0\25\u0131\3\0\23\u0131\3\0\1\u0131\20\0"+
    "\1\u0132\5\0\25\u0132\3\0\23\u0132\3\0\1\u0132\20\0"+
    "\1\u0133\5\0\25\u0133\3\0\23\u0133\3\0\1\u0133\20\0"+
    "\1\u0134\5\0\25\u0134\3\0\23\u0134\3\0\1\u0134\20\0"+
    "\1\u0135\5\0\25\u0135\3\0\23\u0135\3\0\1\u0135\20\0"+
    "\1\u0136\5\0\25\u0136\3\0\23\u0136\3\0\1\u0136\20\0"+
    "\1\u0137\5\0\25\u0137\3\0\23\u0137\3\0\1\u0137\20\0"+
    "\1\u0138\5\0\25\u0138\3\0\23\u0138\3\0\1\u0138\20\0"+
    "\1\u0139\5\0\25\u0139\3\0\23\u0139\3\0\1\u0139";

  private static int [] zzUnpacktrans() {
    int [] result = new int[17664];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\11\2\1\1\11\2\1\1\11\1\1\3\11"+
    "\1\1\1\11\1\1\2\11\17\1\3\11\12\1\4\11"+
    "\1\1\1\11\2\1\1\0\2\11\1\1\2\11\1\1"+
    "\3\11\44\1\6\11\150\1\1\0\5\1\1\0\4\1"+
    "\1\0\5\1\1\0\3\1\1\0\4\1\1\0\3\1"+
    "\3\0\2\1\1\0\2\1\3\0\1\1\1\0\2\1"+
    "\3\0\1\1\1\0\1\1\4\0\1\1\1\11\2\0"+
    "\1\11\1\1\2\0\1\1\2\0\1\1\2\11\37\1"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[313];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    /*************************************************************************
    * En esta sección se puede incluir código que se copiará textualmente
    * como parte de la definición de la clase del analizador léxico.
    * Típicamente serán variables de instancia o nuevos métodos de la clase.
    *************************************************************************/
    int string_yyline = 0;
    int string_yycolumn = 0;
    int count_comentario = 0;
    int cota_string = 100;
    int cota_int = 1000000;
    float cota_float = 1000000.0f;
    int cotaString = 100;
    StringBuffer string = new StringBuffer();

    private MiToken token(String nombre) {
        return new MiToken(nombre, this.yyline, this.yycolumn);
    }

    private MiToken token(String nombre, Object valor) {
        return new MiToken(nombre, this.yyline, this.yycolumn, valor);
    }

    private MiToken token(String nombre, int line, int column, Object valor) {
        if(nombre.equals("STRING_LITERAL")){
            if(valor.toString().length() <= cotaString){
                return new MiToken(nombre, line, column, valor);
            }else{
                throw new Error("Supera la cantidad de caracteres permitidos");
            }
            
        }
        return new MiToken(nombre, line, column, valor);
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MiLexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    return ZZ_CMAP[input];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case STRING: {
              throw new Error("String no balanceado");
            }  // fall though
            case 314: break;
            case Comentario: {
              { throw new Error("Comentario no balanceado");}
            }  // fall though
            case 315: break;
            default:
          { return new java_cup.runtime.Symbol(sym.EOF); }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new Error("Caracter ilegal <"+yytext()+"> ");
            }
          // fall through
          case 66: break;
          case 2:
            { /* ignore */
            }
          // fall through
          case 67: break;
          case 3:
            { string.setLength(0);
          yybegin(STRING);
          string_yyline = this.yyline;
          string_yycolumn = this.yycolumn;
            }
          // fall through
          case 68: break;
          case 4:
            { /*ignore*/
            }
          // fall through
          case 69: break;
          case 5:
            { return new MiToken("PARENTESIS_ABRE", yytext());
            }
          // fall through
          case 70: break;
          case 6:
            { return new MiToken("PARENTESIS_CIERRA", yytext());
            }
          // fall through
          case 71: break;
          case 7:
            { return new MiToken("OPERADOR_MULTI", yytext());
            }
          // fall through
          case 72: break;
          case 8:
            { return new MiToken("OPERADOR_SUMA", yytext());
            }
          // fall through
          case 73: break;
          case 9:
            { return new MiToken("COMA", yytext());
            }
          // fall through
          case 74: break;
          case 10:
            { return new MiToken("OPERADOR_RESTA", yytext());
            }
          // fall through
          case 75: break;
          case 11:
            { return new MiToken("OPERADOR_DIV", yytext());
            }
          // fall through
          case 76: break;
          case 12:
            { if( Integer.valueOf(yytext()) < cota_int ){
                                        return new MiToken("CONST_INT", yytext());
                                  }
                                  else{
                                       throw new Error("Supera el entero determinado");
                                  }
            }
          // fall through
          case 77: break;
          case 13:
            { return new MiToken("DOS_PUNTOS", yytext());
            }
          // fall through
          case 78: break;
          case 14:
            { return new MiToken("PUNTO_COMA", yytext());
            }
          // fall through
          case 79: break;
          case 15:
            { return new MiToken("OPERADOR_MAYOR", yytext());
            }
          // fall through
          case 80: break;
          case 16:
            { return new MiToken("ASIGNACION", yytext());
            }
          // fall through
          case 81: break;
          case 17:
            { return new MiToken("OPERADOR_MENOR", yytext());
            }
          // fall through
          case 82: break;
          case 18:
            { return new MiToken("VAR", yytext());
            }
          // fall through
          case 83: break;
          case 19:
            { return new MiToken("CORCHETE_ABRE", yytext());
            }
          // fall through
          case 84: break;
          case 20:
            { return new MiToken("CORCHETE_CIERRA", yytext());
            }
          // fall through
          case 85: break;
          case 21:
            { return new MiToken("GUION_BAJO", yytext());
            }
          // fall through
          case 86: break;
          case 22:
            { return new MiToken("LLAVE_ABRE", yytext());
            }
          // fall through
          case 87: break;
          case 23:
            { return new MiToken("LLAVE_CIERRA", yytext());
            }
          // fall through
          case 88: break;
          case 24:
            { string.append( yytext() );
            }
          // fall through
          case 89: break;
          case 25:
            { yybegin(YYINITIAL);
                                   return new MiToken("STRING_LITERAL", string_yyline, string_yycolumn, string.toString());
            }
          // fall through
          case 90: break;
          case 26:
            { string.append('\\');
            }
          // fall through
          case 91: break;
          case 27:
            { 
            }
          // fall through
          case 92: break;
          case 28:
            { return new MiToken("OPERADOR_DISTINTO", yytext());
            }
          // fall through
          case 93: break;
          case 29:
            { yybegin(Comentario);
          count_comentario+=1;
            }
          // fall through
          case 94: break;
          case 30:
            { throw new Error("Comentario no balanceado");
            }
          // fall through
          case 95: break;
          case 31:
            { if(Float.valueOf(yytext()) < cota_float){
                                    return new MiToken("CONST_FLOAT", yytext());
                                  }
                                 else{
                                    throw new Error("Supera el float determinado");
                                 }
            }
          // fall through
          case 96: break;
          case 32:
            { return new MiToken("OPERADOR_MAYOR_IGUAL", yytext());
            }
          // fall through
          case 97: break;
          case 33:
            { return new MiToken("OPERADOR_IGUAL", yytext());
            }
          // fall through
          case 98: break;
          case 34:
            { return new MiToken("OPERADOR_MENOR_IGUAL", yytext());
            }
          // fall through
          case 99: break;
          case 35:
            { return new MiToken("DO", yytext());
            }
          // fall through
          case 100: break;
          case 36:
            { return new MiToken("IF", yytext());
            }
          // fall through
          case 101: break;
          case 37:
            { return new MiToken("OPERADOR_OR", yytext());
            }
          // fall through
          case 102: break;
          case 38:
            { string.append('\"');
            }
          // fall through
          case 103: break;
          case 39:
            { string.append('\n');
            }
          // fall through
          case 104: break;
          case 40:
            { string.append('\r');
            }
          // fall through
          case 105: break;
          case 41:
            { string.append('\t');
            }
          // fall through
          case 106: break;
          case 42:
            { count_comentario+=1;
            }
          // fall through
          case 107: break;
          case 43:
            { count_comentario-=1;
      if (count_comentario==0){
          yybegin(YYINITIAL);
      }
            }
          // fall through
          case 108: break;
          case 44:
            { return new MiToken("OPERADOR_AND", yytext());
            }
          // fall through
          case 109: break;
          case 45:
            { return new MiToken("END", yytext());
            }
          // fall through
          case 110: break;
          case 46:
            { return new MiToken("FOR", yytext());
            }
          // fall through
          case 111: break;
          case 47:
            { return new MiToken("INT_TYPE", yytext());
            }
          // fall through
          case 112: break;
          case 48:
            { return new MiToken("OPERADOR_NOT", yytext());
            }
          // fall through
          case 113: break;
          case 49:
            { return new MiToken("ELIF", yytext());
            }
          // fall through
          case 114: break;
          case 50:
            { return new MiToken("ELSE", yytext());
            }
          // fall through
          case 115: break;
          case 51:
            { return new MiToken("THEN", yytext());
            }
          // fall through
          case 116: break;
          case 52:
            { return new MiToken("CONST_BOOL", yytext());
            }
          // fall through
          case 117: break;
          case 53:
            { return new MiToken("BREAK", yytext());
            }
          // fall through
          case 118: break;
          case 54:
            { return new MiToken("FLOAT_TYPE", yytext());
            }
          // fall through
          case 119: break;
          case 55:
            { return new MiToken("FILTER", yytext());
            }
          // fall through
          case 120: break;
          case 56:
            { return new MiToken("BOOLEAN_TYPE", yytext());
            }
          // fall through
          case 121: break;
          case 57:
            { return new MiToken("DISPLAY", yytext());
            }
          // fall through
          case 122: break;
          case 58:
            { return new MiToken("CONTINUE", yytext());
            }
          // fall through
          case 123: break;
          case 59:
            { return new MiToken("INPUT_INT", yytext());
            }
          // fall through
          case 124: break;
          case 60:
            { return new MiToken("INPUT_FLOAT", yytext());
            }
          // fall through
          case 125: break;
          case 61:
            { return new MiToken("INPUT_BOOL", yytext());
            }
          // fall through
          case 126: break;
          case 62:
            { return new MiToken("DECLARE_SECTION", yytext());
            }
          // fall through
          case 127: break;
          case 63:
            { return new MiToken("PROGRAM_SECTION", yytext());
            }
          // fall through
          case 128: break;
          case 64:
            { return new MiToken("END_DECLARE_SECTION", yytext());
            }
          // fall through
          case 129: break;
          case 65:
            { return new MiToken("END_PROGRAM_SECTION", yytext());
            }
          // fall through
          case 130: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
