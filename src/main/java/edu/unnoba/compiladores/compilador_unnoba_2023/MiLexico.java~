// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/main/java/edu/unnoba/compiladores/compilador_unnoba_2023/lexico.flex

/* JFlex example: partial Java language lexer specification */
package edu.unnoba.compiladores.compilador_unnoba_2023;

/**
 * This class is a simple example lexer.
 */

@SuppressWarnings("fallthrough")
public class MiLexico {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int Comentario = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\10\u3000\31\u1f00\1\u0100\1\u3100\1\u3200"+
    "\1\u0100\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u3b00\1\u0100\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u4200\1\u1f00\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00"+
    "\1\u4f00\1\u5000\1\u5100\1\u1f00\3\u0100\1\u5200\1\u5300\1\u5400"+
    "\12\u1f00\4\u0100\1\u5500\17\u1f00\2\u0100\1\u5600\41\u1f00\2\u0100"+
    "\1\u5700\1\u5800\2\u1f00\1\u5900\1\u5a00\27\u0100\1\u5b00\2\u0100"+
    "\1\u5c00\45\u1f00\1\u0100\1\u5d00\1\u5e00\11\u1f00\1\u5f00\24\u1f00"+
    "\1\u6000\1\u6100\1\u1f00\1\u6200\1\u6300\1\u6400\1\u6500\2\u1f00"+
    "\1\u6600\5\u1f00\1\u6700\1\u6800\1\u6900\5\u1f00\1\u6a00\1\u6b00"+
    "\4\u1f00\1\u6c00\2\u1f00\1\u6d00\16\u1f00\246\u0100\1\u6e00\20\u0100"+
    "\1\u6f00\1\u7000\25\u0100\1\u7100\34\u0100\1\u7200\14\u1f00\2\u0100"+
    "\1\u7300\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\5"+
    "\1\6\1\7\2\0\1\10\1\0\1\11\1\12\1\13"+
    "\1\14\1\0\1\15\1\16\1\17\12\20\2\0\1\21"+
    "\1\22\1\23\2\0\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\33\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\33\1\43\1\44\1\45\1\46"+
    "\3\33\1\47\1\33\1\0\1\50\2\0\1\51\1\0"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\33"+
    "\1\61\1\33\1\62\1\63\1\33\1\64\1\65\1\66"+
    "\1\33\1\67\1\70\1\71\1\72\3\33\1\73\1\33"+
    "\1\74\1\75\1\76\7\0\1\3\32\0\1\1\11\0"+
    "\1\51\1\0\1\77\10\0\1\51\4\0\1\51\5\0"+
    "\2\51\1\100\24\51\1\0\37\51\1\0\u01ca\51\4\0"+
    "\14\51\16\0\5\51\7\0\1\51\1\0\1\51\21\0"+
    "\165\51\1\0\2\51\2\0\4\51\1\0\1\51\6\0"+
    "\1\51\1\0\3\51\1\0\1\51\1\0\24\51\1\0"+
    "\123\51\1\0\213\51\1\0\255\51\1\0\46\51\2\0"+
    "\1\51\6\0\51\51\10\0\55\51\1\0\1\51\1\0"+
    "\2\51\1\0\2\51\1\0\1\51\10\0\33\51\4\0"+
    "\4\51\35\0\13\51\5\0\112\51\4\0\146\51\1\0"+
    "\10\51\2\0\12\51\1\0\23\51\2\0\1\51\20\0"+
    "\73\51\2\0\145\51\16\0\66\51\4\0\1\51\2\0"+
    "\1\51\2\0\56\51\22\0\34\51\4\0\13\51\65\0"+
    "\25\51\1\0\10\51\25\0\17\51\1\0\201\51\2\0"+
    "\12\51\1\0\23\51\1\0\10\51\2\0\2\51\2\0"+
    "\26\51\1\0\7\51\1\0\1\51\3\0\4\51\2\0"+
    "\11\51\2\0\2\51\2\0\4\51\10\0\1\51\4\0"+
    "\2\51\1\0\5\51\2\0\14\51\12\0\1\51\1\0"+
    "\1\51\2\0\3\51\1\0\6\51\4\0\2\51\2\0"+
    "\26\51\1\0\7\51\1\0\2\51\1\0\2\51\1\0"+
    "\2\51\2\0\1\51\1\0\5\51\4\0\2\51\2\0"+
    "\3\51\3\0\1\51\7\0\4\51\1\0\1\51\7\0"+
    "\20\51\13\0\3\51\1\0\11\51\1\0\3\51\1\0"+
    "\26\51\1\0\7\51\1\0\2\51\1\0\5\51\2\0"+
    "\12\51\1\0\3\51\1\0\3\51\2\0\1\51\17\0"+
    "\4\51\2\0\12\51\11\0\7\51\1\0\3\51\1\0"+
    "\10\51\2\0\2\51\2\0\26\51\1\0\7\51\1\0"+
    "\2\51\1\0\5\51\2\0\11\51\2\0\2\51\2\0"+
    "\3\51\10\0\2\51\4\0\2\51\1\0\5\51\2\0"+
    "\12\51\1\0\1\51\20\0\2\51\1\0\6\51\3\0"+
    "\3\51\1\0\4\51\3\0\2\51\1\0\1\51\1\0"+
    "\2\51\3\0\2\51\3\0\3\51\3\0\14\51\4\0"+
    "\5\51\3\0\3\51\1\0\4\51\2\0\1\51\6\0"+
    "\1\51\16\0\12\51\20\0\15\51\1\0\3\51\1\0"+
    "\27\51\1\0\20\51\3\0\10\51\1\0\3\51\1\0"+
    "\4\51\7\0\2\51\1\0\3\51\5\0\4\51\2\0"+
    "\12\51\20\0\4\51\1\0\10\51\1\0\3\51\1\0"+
    "\27\51\1\0\12\51\1\0\5\51\2\0\11\51\1\0"+
    "\3\51\1\0\4\51\7\0\2\51\7\0\1\51\1\0"+
    "\4\51\2\0\12\51\1\0\2\51\15\0\4\51\1\0"+
    "\10\51\1\0\3\51\1\0\63\51\1\0\3\51\1\0"+
    "\5\51\5\0\4\51\7\0\5\51\2\0\12\51\12\0"+
    "\6\51\2\0\2\51\1\0\22\51\3\0\30\51\1\0"+
    "\11\51\1\0\1\51\2\0\7\51\3\0\1\51\4\0"+
    "\6\51\1\0\1\51\1\0\10\51\6\0\12\51\2\0"+
    "\2\51\15\0\72\51\5\0\17\51\1\0\12\51\47\0"+
    "\2\51\1\0\1\51\1\0\5\51\1\0\30\51\1\0"+
    "\1\51\1\0\27\51\2\0\5\51\1\0\1\51\1\0"+
    "\6\51\2\0\12\51\2\0\4\51\40\0\1\51\27\0"+
    "\2\51\6\0\12\51\13\0\1\51\1\0\1\51\1\0"+
    "\1\51\4\0\12\51\1\0\44\51\4\0\24\51\1\0"+
    "\22\51\1\0\44\51\11\0\1\51\71\0\112\51\6\0"+
    "\116\51\2\0\46\51\1\0\1\51\5\0\1\51\2\0"+
    "\53\51\1\0\115\51\1\0\4\51\2\0\7\51\1\0"+
    "\1\51\1\0\4\51\2\0\51\51\1\0\4\51\2\0"+
    "\41\51\1\0\4\51\2\0\7\51\1\0\1\51\1\0"+
    "\4\51\2\0\17\51\1\0\71\51\1\0\4\51\2\0"+
    "\103\51\2\0\3\51\40\0\20\51\20\0\126\51\2\0"+
    "\6\51\3\0\u016c\51\2\0\21\51\1\1\32\51\5\0"+
    "\113\51\3\0\13\51\7\0\15\51\1\0\7\51\13\0"+
    "\25\51\13\0\24\51\14\0\15\51\1\0\3\51\1\0"+
    "\2\51\14\0\124\51\3\0\1\51\4\0\2\51\2\0"+
    "\12\51\41\0\3\51\2\0\12\51\6\0\131\51\7\0"+
    "\53\51\5\0\106\51\12\0\37\51\1\0\14\51\4\0"+
    "\14\51\12\0\50\51\2\0\5\51\13\0\54\51\4\0"+
    "\32\51\6\0\12\51\46\0\34\51\4\0\77\51\1\0"+
    "\35\51\2\0\13\51\6\0\12\51\15\0\1\51\10\0"+
    "\17\51\101\0\114\51\4\0\12\51\21\0\11\51\14\0"+
    "\164\51\14\0\70\51\10\0\12\51\3\0\61\51\2\0"+
    "\11\51\7\0\53\51\2\0\3\51\20\0\3\51\1\0"+
    "\47\51\5\0\372\51\1\0\33\51\2\0\6\51\2\0"+
    "\46\51\2\0\6\51\2\0\10\51\1\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\37\51\2\0\65\51\1\0"+
    "\7\51\1\0\1\51\3\0\3\51\1\0\7\51\3\0"+
    "\4\51\2\0\6\51\4\0\15\51\5\0\3\51\1\0"+
    "\7\51\3\0\13\1\35\0\2\3\5\0\1\1\17\0"+
    "\2\51\23\0\1\51\12\0\1\1\21\0\1\51\15\0"+
    "\1\51\20\0\15\51\63\0\41\51\21\0\1\51\4\0"+
    "\1\51\2\0\12\51\1\0\1\51\3\0\5\51\6\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\4\51\1\0"+
    "\13\51\2\0\4\51\5\0\5\51\4\0\1\51\21\0"+
    "\51\51\u022d\0\64\51\26\0\57\51\1\0\57\51\1\0"+
    "\205\51\6\0\11\51\14\0\46\51\1\0\1\51\5\0"+
    "\1\51\2\0\70\51\7\0\1\51\17\0\30\51\11\0"+
    "\7\51\1\0\7\51\1\0\7\51\1\0\7\51\1\0"+
    "\7\51\1\0\7\51\1\0\7\51\1\0\7\51\1\0"+
    "\40\51\57\0\1\51\320\0\1\1\4\0\3\51\31\0"+
    "\17\51\1\0\5\51\2\0\5\51\4\0\126\51\2\0"+
    "\2\51\2\0\3\51\1\0\132\51\1\0\4\51\5\0"+
    "\53\51\1\0\136\51\21\0\33\51\65\0\306\51\112\0"+
    "\360\51\20\0\215\51\103\0\56\51\2\0\15\51\3\0"+
    "\34\51\24\0\63\51\1\0\12\51\1\0\163\51\45\0"+
    "\11\51\2\0\147\51\2\0\65\51\2\0\5\51\60\0"+
    "\61\51\30\0\64\51\14\0\106\51\12\0\12\51\6\0"+
    "\30\51\3\0\1\51\1\0\61\51\2\0\44\51\14\0"+
    "\35\51\3\0\101\51\16\0\13\51\6\0\37\51\1\0"+
    "\67\51\11\0\16\51\2\0\12\51\6\0\27\51\3\0"+
    "\111\51\30\0\3\51\2\0\20\51\2\0\5\51\12\0"+
    "\6\51\2\0\6\51\2\0\6\51\11\0\7\51\1\0"+
    "\7\51\1\0\53\51\1\0\14\51\10\0\173\51\1\0"+
    "\2\51\2\0\12\51\6\0\244\51\14\0\27\51\4\0"+
    "\61\51\4\0\u0100\101\156\51\2\0\152\51\46\0\7\51"+
    "\14\0\5\51\5\0\14\51\1\0\15\51\1\0\5\51"+
    "\1\0\1\51\1\0\2\51\1\0\2\51\1\0\154\51"+
    "\41\0\153\51\22\0\100\51\2\0\66\51\50\0\14\51"+
    "\4\0\20\51\20\0\20\51\3\0\2\51\30\0\3\51"+
    "\40\0\5\51\1\0\207\51\23\0\12\51\7\0\32\51"+
    "\4\0\1\51\1\0\32\51\13\0\131\51\3\0\6\51"+
    "\2\0\6\51\2\0\6\51\2\0\3\51\43\0\14\51"+
    "\1\0\32\51\1\0\23\51\1\0\2\51\1\0\17\51"+
    "\2\0\16\51\42\0\173\51\105\0\65\51\210\0\1\51"+
    "\202\0\35\51\3\0\61\51\17\0\1\51\37\0\40\51"+
    "\15\0\36\51\5\0\53\51\5\0\36\51\2\0\44\51"+
    "\4\0\10\51\1\0\5\51\52\0\236\51\2\0\12\51"+
    "\6\0\44\51\4\0\44\51\4\0\50\51\10\0\64\51"+
    "\234\0\67\51\11\0\26\51\12\0\10\51\230\0\6\51"+
    "\2\0\1\51\1\0\54\51\1\0\2\51\3\0\1\51"+
    "\2\0\27\51\12\0\27\51\11\0\37\51\101\0\23\51"+
    "\1\0\2\51\12\0\26\51\12\0\32\51\106\0\70\51"+
    "\6\0\2\51\100\0\4\51\1\0\2\51\5\0\10\51"+
    "\1\0\3\51\1\0\35\51\2\0\3\51\4\0\1\51"+
    "\40\0\35\51\3\0\35\51\43\0\10\51\1\0\36\51"+
    "\31\0\66\51\12\0\26\51\12\0\23\51\15\0\22\51"+
    "\156\0\111\51\67\0\63\51\15\0\63\51\15\0\50\51"+
    "\10\0\12\51\306\0\35\51\12\0\1\51\10\0\41\51"+
    "\217\0\27\51\11\0\107\51\37\0\12\51\17\0\74\51"+
    "\25\0\31\51\7\0\12\51\6\0\65\51\1\0\12\51"+
    "\4\0\3\51\11\0\44\51\2\0\1\51\11\0\105\51"+
    "\4\0\4\51\3\0\13\51\1\0\1\51\43\0\22\51"+
    "\1\0\45\51\6\0\1\51\101\0\7\51\1\0\1\51"+
    "\1\0\4\51\1\0\17\51\1\0\12\51\7\0\73\51"+
    "\5\0\12\51\6\0\4\51\1\0\10\51\2\0\2\51"+
    "\2\0\26\51\1\0\7\51\1\0\2\51\1\0\5\51"+
    "\1\0\12\51\2\0\2\51\2\0\3\51\2\0\1\51"+
    "\6\0\1\51\5\0\7\51\2\0\7\51\3\0\5\51"+
    "\213\0\113\51\5\0\12\51\4\0\2\51\40\0\106\51"+
    "\1\0\1\51\10\0\12\51\246\0\66\51\2\0\11\51"+
    "\27\0\6\51\42\0\101\51\3\0\1\51\13\0\12\51"+
    "\46\0\71\51\7\0\12\51\66\0\33\51\2\0\17\51"+
    "\4\0\12\51\306\0\73\51\145\0\112\51\25\0\1\51"+
    "\240\0\10\51\2\0\56\51\2\0\10\51\1\0\2\51"+
    "\33\0\77\51\10\0\1\51\10\0\112\51\3\0\1\51"+
    "\42\0\71\51\7\0\11\51\1\0\55\51\1\0\11\51"+
    "\17\0\12\51\30\0\36\51\2\0\26\51\1\0\16\51"+
    "\111\0\7\51\1\0\2\51\1\0\54\51\3\0\1\51"+
    "\1\0\2\51\1\0\11\51\10\0\12\51\6\0\6\51"+
    "\1\0\2\51\1\0\45\51\1\0\2\51\1\0\6\51"+
    "\7\0\12\51\u0136\0\27\51\11\0\232\51\146\0\157\51"+
    "\21\0\304\51\274\0\57\51\321\0\107\51\271\0\71\51"+
    "\7\0\37\51\1\0\12\51\146\0\36\51\2\0\5\51"+
    "\13\0\67\51\11\0\4\51\14\0\12\51\11\0\25\51"+
    "\5\0\23\51\260\0\100\51\200\0\113\51\4\0\71\51"+
    "\7\0\21\51\100\0\2\51\1\0\1\51\34\0\370\51"+
    "\10\0\363\51\15\0\37\51\61\0\3\51\21\0\4\51"+
    "\10\0\u018c\51\4\0\153\51\5\0\15\51\3\0\11\51"+
    "\7\0\12\51\3\0\2\51\306\0\5\51\3\0\6\51"+
    "\10\0\10\51\2\0\7\51\36\0\4\51\224\0\3\51"+
    "\273\0\125\51\1\0\107\51\1\0\2\51\2\0\1\51"+
    "\2\0\2\51\2\0\4\51\1\0\14\51\1\0\1\51"+
    "\1\0\7\51\1\0\101\51\1\0\4\51\2\0\10\51"+
    "\1\0\7\51\1\0\34\51\1\0\4\51\1\0\5\51"+
    "\1\0\1\51\3\0\7\51\1\0\u0154\51\2\0\31\51"+
    "\1\0\31\51\1\0\37\51\1\0\31\51\1\0\37\51"+
    "\1\0\31\51\1\0\37\51\1\0\31\51\1\0\37\51"+
    "\1\0\31\51\1\0\10\51\2\0\151\51\4\0\62\51"+
    "\10\0\1\51\16\0\1\51\26\0\5\51\1\0\17\51"+
    "\120\0\7\51\1\0\21\51\2\0\7\51\1\0\2\51"+
    "\1\0\5\51\325\0\55\51\3\0\16\51\2\0\12\51"+
    "\4\0\1\51\u0171\0\72\51\6\0\305\51\13\0\7\51"+
    "\51\0\114\51\4\0\12\51\246\0\4\51\1\0\33\51"+
    "\1\0\2\51\1\0\1\51\2\0\1\51\1\0\12\51"+
    "\1\0\4\51\1\0\1\51\1\0\1\51\6\0\1\51"+
    "\4\0\1\51\1\0\1\51\1\0\1\51\1\0\3\51"+
    "\1\0\2\51\1\0\1\51\2\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\1\51\1\0\2\51"+
    "\1\0\1\51\2\0\4\51\1\0\7\51\1\0\4\51"+
    "\1\0\4\51\1\0\1\51\1\0\12\51\1\0\21\51"+
    "\5\0\3\51\1\0\5\51\1\0\21\51\164\0\32\51"+
    "\6\0\32\51\6\0\32\51\166\0\327\51\51\0\65\51"+
    "\13\0\336\51\2\0\u0182\51\16\0\u0131\51\37\0\36\51"+
    "\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29696];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\22\20\1\21\1\22\1\23\1\1\1\24\1\25"+
    "\1\26\3\27\1\30\2\4\1\31\1\32\1\0\1\14"+
    "\1\33\1\34\1\35\6\20\1\36\25\20\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\14\6\20"+
    "\1\47\3\20\1\50\1\51\7\20\1\47\5\20\1\46"+
    "\1\14\14\20\1\52\7\20\1\46\1\14\2\20\1\53"+
    "\6\20\1\54\7\20\1\46\1\14\7\20\1\55\1\20"+
    "\1\56\3\20\1\46\1\14\1\20\1\57\2\20\1\60"+
    "\4\20\1\46\1\14\1\20\1\61\1\0\2\20\1\0"+
    "\1\46\1\14\1\20\1\0\2\20\1\0\1\46\1\14"+
    "\1\20\1\0\2\20\1\0\1\46\1\14\1\20\4\0"+
    "\1\46\1\14\1\20\4\0\1\14\1\20\4\0\1\14"+
    "\1\20\4\0\1\14\1\20\1\62\2\0\1\63\1\14"+
    "\1\20\2\0\1\14\1\20\2\0\1\14\1\20\1\64"+
    "\1\65\1\14\1\20\1\14\1\20\1\0\36\20";

  private static int [] zzUnpackAction() {
    int [] result = new int[288];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\306\0\u0108\0\u014a\0\306"+
    "\0\u018c\0\306\0\u01ce\0\306\0\u0210\0\306\0\306\0\306"+
    "\0\u0252\0\u0294\0\u02d6\0\u0318\0\u035a\0\u039c\0\u03de\0\u0420"+
    "\0\u0462\0\u04a4\0\u04e6\0\u0528\0\u056a\0\u05ac\0\u05ee\0\u0630"+
    "\0\u0672\0\u06b4\0\u06f6\0\u0738\0\u077a\0\u07bc\0\306\0\u035a"+
    "\0\306\0\u07fe\0\306\0\306\0\u0840\0\306\0\u0882\0\u08c4"+
    "\0\306\0\306\0\u0906\0\306\0\306\0\u0948\0\u098a\0\306"+
    "\0\306\0\306\0\u09cc\0\u0a0e\0\u0a50\0\u0a92\0\u0ad4\0\u0b16"+
    "\0\u035a\0\u0b58\0\u0b9a\0\u0bdc\0\u0c1e\0\u0c60\0\u0ca2\0\u0ce4"+
    "\0\u0d26\0\u0d68\0\u0daa\0\u0dec\0\u0e2e\0\u0e70\0\u0eb2\0\u0ef4"+
    "\0\u0f36\0\u0f78\0\u0fba\0\u0ffc\0\u103e\0\u1080\0\306\0\306"+
    "\0\306\0\306\0\306\0\306\0\306\0\u10c2\0\u1104\0\u1146"+
    "\0\u1188\0\u11ca\0\u120c\0\u124e\0\u1290\0\u12d2\0\u1314\0\u1356"+
    "\0\u1398\0\u035a\0\u035a\0\u13da\0\u141c\0\u145e\0\u14a0\0\u14e2"+
    "\0\u1524\0\u1566\0\u035a\0\u15a8\0\u15ea\0\u162c\0\u166e\0\u16b0"+
    "\0\u16f2\0\u1734\0\u1776\0\u17b8\0\u17fa\0\u183c\0\u187e\0\u18c0"+
    "\0\u1902\0\u1944\0\u1986\0\u19c8\0\u1a0a\0\u1a4c\0\u035a\0\u1a8e"+
    "\0\u1ad0\0\u1b12\0\u1b54\0\u1b96\0\u1bd8\0\u1c1a\0\u1c5c\0\u1c9e"+
    "\0\u1ce0\0\u1d22\0\u035a\0\u1d64\0\u1da6\0\u1de8\0\u1e2a\0\u1e6c"+
    "\0\u1eae\0\u035a\0\u1ef0\0\u1f32\0\u1f74\0\u1fb6\0\u1ff8\0\u203a"+
    "\0\u207c\0\u20be\0\u2100\0\u2142\0\u2184\0\u21c6\0\u2208\0\u224a"+
    "\0\u228c\0\u22ce\0\u035a\0\u2310\0\u035a\0\u2352\0\u2394\0\u23d6"+
    "\0\u2418\0\u245a\0\u249c\0\u035a\0\u24de\0\u2520\0\u035a\0\u2562"+
    "\0\u25a4\0\u25e6\0\u2628\0\u266a\0\u26ac\0\u26ee\0\u035a\0\u2730"+
    "\0\u2772\0\u27b4\0\u27f6\0\u2838\0\u287a\0\u28bc\0\u28fe\0\u2940"+
    "\0\u2982\0\u29c4\0\u2a06\0\u2a48\0\u2a8a\0\u2acc\0\u2b0e\0\u2b50"+
    "\0\u2b92\0\u2bd4\0\u2c16\0\u2c58\0\u2c9a\0\u2cdc\0\u2d1e\0\u2d60"+
    "\0\306\0\u2da2\0\u2de4\0\u2e26\0\u2e68\0\u2eaa\0\u2eec\0\u2f2e"+
    "\0\u2f70\0\u2fb2\0\u2ff4\0\u3036\0\u3078\0\u30ba\0\u30fc\0\u313e"+
    "\0\u3180\0\u31c2\0\u3204\0\u3246\0\u3288\0\306\0\u32ca\0\u330c"+
    "\0\306\0\u334e\0\u3390\0\u33d2\0\u3414\0\u3456\0\u3498\0\u34da"+
    "\0\u351c\0\u355e\0\u35a0\0\306\0\306\0\u35e2\0\u3624\0\u3666"+
    "\0\u36a8\0\u3666\0\u36ea\0\u372c\0\u376e\0\u37b0\0\u37f2\0\u3834"+
    "\0\u3876\0\u38b8\0\u38fa\0\u393c\0\u397e\0\u39c0\0\u3a02\0\u3a44"+
    "\0\u3a86\0\u3ac8\0\u3b0a\0\u3b4c\0\u3b8e\0\u3bd0\0\u3c12\0\u3c54"+
    "\0\u3c96\0\u3cd8\0\u3d1a\0\u3d5c\0\u3d9e\0\u3de0\0\u3e22\0\306";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[288];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\3\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\4\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\2\25\1\33\5\25\1\34\1\25\1\35\1\36\2\25"+
    "\2\4\1\25\1\37\1\40\1\41\1\42\1\43\1\25"+
    "\1\44\6\25\1\45\1\46\2\25\1\47\1\50\1\51"+
    "\1\4\1\52\1\4\6\53\1\54\41\53\1\55\31\53"+
    "\11\56\1\57\1\56\1\60\66\56\104\0\1\5\121\0"+
    "\1\61\57\0\2\11\1\62\1\0\1\63\74\11\14\0"+
    "\1\64\100\0\1\65\105\0\1\66\1\0\1\67\103\0"+
    "\1\70\101\0\1\71\101\0\1\72\77\0\1\73\3\0"+
    "\24\25\1\0\1\73\22\25\1\0\1\25\2\0\1\73"+
    "\21\0\1\73\3\0\15\25\1\74\1\25\1\75\4\25"+
    "\1\0\1\73\22\25\1\0\1\25\2\0\1\73\21\0"+
    "\1\73\3\0\15\25\1\76\6\25\1\0\1\73\22\25"+
    "\1\0\1\25\2\0\1\73\21\0\1\73\3\0\4\25"+
    "\1\77\3\25\1\100\4\25\1\101\6\25\1\0\1\73"+
    "\22\25\1\0\1\25\2\0\1\73\21\0\1\73\3\0"+
    "\14\25\1\102\7\25\1\0\1\73\22\25\1\0\1\25"+
    "\2\0\1\73\21\0\1\73\3\0\1\103\7\25\1\104"+
    "\1\25\1\105\2\25\1\106\6\25\1\0\1\73\22\25"+
    "\1\0\1\25\2\0\1\73\21\0\1\73\3\0\14\25"+
    "\1\107\7\25\1\0\1\73\22\25\1\0\1\25\2\0"+
    "\1\73\21\0\1\73\3\0\17\25\1\110\4\25\1\0"+
    "\1\73\22\25\1\0\1\25\2\0\1\73\21\0\1\73"+
    "\3\0\21\25\1\111\2\25\1\0\1\73\22\25\1\0"+
    "\1\25\2\0\1\73\21\0\1\73\3\0\17\25\1\112"+
    "\4\25\1\0\1\73\22\25\1\0\1\25\2\0\1\73"+
    "\21\0\1\73\3\0\24\25\1\0\1\73\13\25\1\113"+
    "\1\25\1\114\4\25\1\0\1\25\2\0\1\73\21\0"+
    "\1\73\3\0\24\25\1\0\1\73\13\25\1\115\6\25"+
    "\1\0\1\25\2\0\1\73\21\0\1\73\3\0\24\25"+
    "\1\0\1\73\7\25\1\116\3\25\1\101\6\25\1\0"+
    "\1\25\2\0\1\73\21\0\1\73\3\0\24\25\1\0"+
    "\1\73\12\25\1\117\7\25\1\0\1\25\2\0\1\73"+
    "\21\0\1\73\3\0\24\25\1\0\1\73\1\120\6\25"+
    "\1\121\1\25\1\122\1\25\1\123\6\25\1\0\1\25"+
    "\2\0\1\73\21\0\1\73\3\0\24\25\1\0\1\73"+
    "\12\25\1\124\7\25\1\0\1\25\2\0\1\73\21\0"+
    "\1\73\3\0\24\25\1\0\1\73\17\25\1\125\2\25"+
    "\1\0\1\25\2\0\1\73\21\0\1\73\3\0\24\25"+
    "\1\0\1\73\15\25\1\126\4\25\1\0\1\25\2\0"+
    "\1\73\100\0\1\127\10\0\1\130\55\0\1\131\2\0"+
    "\1\132\1\0\1\133\23\0\1\134\100\0\1\135\71\0"+
    "\1\62\117\0\1\136\77\0\1\66\1\0\1\137\101\0"+
    "\1\140\3\0\24\140\1\0\23\140\4\0\1\140\21\0"+
    "\1\73\3\0\15\25\1\141\6\25\1\0\1\73\22\25"+
    "\1\0\1\25\2\0\1\73\21\0\1\73\3\0\4\25"+
    "\1\142\17\25\1\0\1\73\22\25\1\0\1\25\2\0"+
    "\1\73\21\0\1\73\3\0\14\25\1\143\7\25\1\0"+
    "\1\73\22\25\1\0\1\25\2\0\1\73\21\0\1\73"+
    "\3\0\2\25\1\144\21\25\1\0\1\73\22\25\1\0"+
    "\1\25\2\0\1\73\21\0\1\73\3\0\20\25\1\145"+
    "\3\25\1\0\1\73\22\25\1\0\1\25\2\0\1\73"+
    "\21\0\1\73\3\0\3\25\1\146\20\25\1\0\1\73"+
    "\22\25\1\0\1\25\2\0\1\73\21\0\1\73\3\0"+
    "\12\25\1\147\11\25\1\0\1\73\22\25\1\0\1\25"+
    "\2\0\1\73\21\0\1\73\3\0\12\25\1\150\11\25"+
    "\1\0\1\73\22\25\1\0\1\25\2\0\1\73\21\0"+
    "\1\73\3\0\15\25\1\151\6\25\1\0\1\73\22\25"+
    "\1\0\1\25\2\0\1\73\21\0\1\73\3\0\17\25"+
    "\1\152\4\25\1\0\1\73\22\25\1\0\1\25\2\0"+
    "\1\73\21\0\1\73\3\0\21\25\1\153\2\25\1\0"+
    "\1\73\22\25\1\0\1\25\2\0\1\73\21\0\1\73"+
    "\3\0\15\25\1\154\6\25\1\0\1\73\22\25\1\0"+
    "\1\25\2\0\1\73\21\0\1\73\3\0\17\25\1\155"+
    "\4\25\1\0\1\73\22\25\1\0\1\25\2\0\1\73"+
    "\21\0\1\73\3\0\22\25\1\156\1\25\1\0\1\73"+
    "\22\25\1\0\1\25\2\0\1\73\21\0\1\73\3\0"+
    "\24\25\1\0\1\73\13\25\1\157\6\25\1\0\1\25"+
    "\2\0\1\73\21\0\1\73\3\0\24\25\1\0\1\73"+
    "\4\25\1\160\15\25\1\0\1\25\2\0\1\73\21\0"+
    "\1\73\3\0\24\25\1\0\1\73\12\25\1\161\7\25"+
    "\1\0\1\25\2\0\1\73\21\0\1\73\3\0\24\25"+
    "\1\0\1\73\16\25\1\162\3\25\1\0\1\25\2\0"+
    "\1\73\21\0\1\73\3\0\24\25\1\0\1\73\3\25"+
    "\1\163\16\25\1\0\1\25\2\0\1\73\21\0\1\73"+
    "\3\0\24\25\1\0\1\73\11\25\1\164\10\25\1\0"+
    "\1\25\2\0\1\73\21\0\1\73\3\0\24\25\1\0"+
    "\1\73\11\25\1\165\10\25\1\0\1\25\2\0\1\73"+
    "\21\0\1\73\3\0\24\25\1\0\1\73\13\25\1\166"+
    "\6\25\1\0\1\25\2\0\1\73\21\0\1\73\3\0"+
    "\24\25\1\0\1\73\15\25\1\152\4\25\1\0\1\25"+
    "\2\0\1\73\21\0\1\73\3\0\24\25\1\0\1\73"+
    "\17\25\1\153\2\25\1\0\1\25\2\0\1\73\21\0"+
    "\1\73\3\0\24\25\1\0\1\73\15\25\1\167\4\25"+
    "\1\0\1\25\2\0\1\73\21\0\1\73\3\0\24\25"+
    "\1\0\1\73\20\25\1\170\1\25\1\0\1\25\2\0"+
    "\1\73\21\0\1\171\77\0\1\66\1\0\1\172\101\0"+
    "\1\173\3\0\24\173\1\0\23\173\4\0\1\173\21\0"+
    "\1\73\3\0\12\25\1\174\11\25\1\0\1\73\22\25"+
    "\1\0\1\25\2\0\1\73\21\0\1\73\3\0\1\175"+
    "\23\25\1\0\1\73\22\25\1\0\1\25\2\0\1\73"+
    "\21\0\1\73\3\0\21\25\1\176\2\25\1\0\1\73"+
    "\22\25\1\0\1\25\2\0\1\73\21\0\1\73\3\0"+
    "\12\25\1\177\11\25\1\0\1\73\22\25\1\0\1\25"+
    "\2\0\1\73\21\0\1\73\3\0\16\25\1\200\5\25"+
    "\1\0\1\73\22\25\1\0\1\25\2\0\1\73\21\0"+
    "\1\73\3\0\3\25\1\201\12\25\1\202\5\25\1\0"+
    "\1\73\22\25\1\0\1\25\2\0\1\73\21\0\1\73"+
    "\3\0\20\25\1\156\3\25\1\0\1\73\22\25\1\0"+
    "\1\25\2\0\1\73\21\0\1\73\3\0\21\25\1\203"+
    "\2\25\1\0\1\73\22\25\1\0\1\25\2\0\1\73"+
    "\21\0\1\73\3\0\1\204\23\25\1\0\1\73\22\25"+
    "\1\0\1\25\2\0\1\73\21\0\1\73\3\0\6\25"+
    "\1\205\15\25\1\0\1\73\22\25\1\0\1\25\2\0"+
    "\1\73\21\0\1\73\3\0\10\25\1\206\13\25\1\0"+
    "\1\73\22\25\1\0\1\25\2\0\1\73\21\0\1\73"+
    "\3\0\4\25\1\207\17\25\1\0\1\73\22\25\1\0"+
    "\1\25\2\0\1\73\21\0\1\73\3\0\24\25\1\0"+
    "\1\73\11\25\1\210\10\25\1\0\1\25\2\0\1\73"+
    "\21\0\1\73\3\0\24\25\1\0\1\73\1\211\21\25"+
    "\1\0\1\25\2\0\1\73\21\0\1\73\3\0\24\25"+
    "\1\0\1\73\17\25\1\212\2\25\1\0\1\25\2\0"+
    "\1\73\21\0\1\73\3\0\24\25\1\0\1\73\14\25"+
    "\1\213\5\25\1\0\1\25\2\0\1\73\21\0\1\73"+
    "\3\0\24\25\1\0\1\73\16\25\1\170\3\25\1\0"+
    "\1\25\2\0\1\73\21\0\1\73\3\0\24\25\1\0"+
    "\1\73\17\25\1\214\2\25\1\0\1\25\2\0\1\73"+
    "\21\0\1\73\3\0\24\25\1\0\1\73\1\215\21\25"+
    "\1\0\1\25\2\0\1\73\21\0\1\73\3\0\24\25"+
    "\1\0\1\73\7\25\1\216\12\25\1\0\1\25\2\0"+
    "\1\73\21\0\1\73\3\0\24\25\1\0\1\73\4\25"+
    "\1\207\15\25\1\0\1\25\2\0\1\73\21\0\1\217"+
    "\77\0\1\66\1\0\1\220\101\0\1\221\3\0\24\221"+
    "\1\0\23\221\4\0\1\221\21\0\1\73\3\0\4\25"+
    "\1\222\17\25\1\0\1\73\22\25\1\0\1\25\2\0"+
    "\1\73\21\0\1\73\3\0\11\25\1\223\12\25\1\0"+
    "\1\73\22\25\1\0\1\25\2\0\1\73\21\0\1\73"+
    "\3\0\10\25\1\224\13\25\1\0\1\73\22\25\1\0"+
    "\1\25\2\0\1\73\21\0\1\73\3\0\1\225\23\25"+
    "\1\0\1\73\22\25\1\0\1\25\2\0\1\73\21\0"+
    "\1\73\3\0\12\25\1\226\11\25\1\0\1\73\22\25"+
    "\1\0\1\25\2\0\1\73\21\0\1\73\3\0\4\25"+
    "\1\227\17\25\1\0\1\73\22\25\1\0\1\25\2\0"+
    "\1\73\21\0\1\73\3\0\17\25\1\230\4\25\1\0"+
    "\1\73\22\25\1\0\1\25\2\0\1\73\21\0\1\73"+
    "\3\0\4\25\1\231\17\25\1\0\1\73\22\25\1\0"+
    "\1\25\2\0\1\73\21\0\1\73\3\0\21\25\1\232"+
    "\2\25\1\0\1\73\22\25\1\0\1\25\2\0\1\73"+
    "\21\0\1\73\3\0\17\25\1\233\4\25\1\0\1\73"+
    "\22\25\1\0\1\25\2\0\1\73\21\0\1\73\3\0"+
    "\14\25\1\234\7\25\1\0\1\73\22\25\1\0\1\25"+
    "\2\0\1\73\21\0\1\73\3\0\24\25\1\0\1\73"+
    "\4\25\1\235\15\25\1\0\1\25\2\0\1\73\21\0"+
    "\1\73\3\0\24\25\1\0\1\73\10\25\1\223\11\25"+
    "\1\0\1\25\2\0\1\73\21\0\1\73\3\0\24\25"+
    "\1\0\1\73\7\25\1\236\12\25\1\0\1\25\2\0"+
    "\1\73\21\0\1\73\3\0\24\25\1\0\1\73\11\25"+
    "\1\237\10\25\1\0\1\25\2\0\1\73\21\0\1\73"+
    "\3\0\24\25\1\0\1\73\4\25\1\240\15\25\1\0"+
    "\1\25\2\0\1\73\21\0\1\73\3\0\24\25\1\0"+
    "\1\73\17\25\1\232\2\25\1\0\1\25\2\0\1\73"+
    "\21\0\1\73\3\0\24\25\1\0\1\73\12\25\1\241"+
    "\7\25\1\0\1\25\2\0\1\73\21\0\1\242\77\0"+
    "\1\66\1\0\1\243\101\0\1\244\3\0\24\244\1\0"+
    "\23\244\4\0\1\244\21\0\1\73\3\0\1\245\23\25"+
    "\1\0\1\73\22\25\1\0\1\25\2\0\1\73\21\0"+
    "\1\73\3\0\14\25\1\246\7\25\1\0\1\73\22\25"+
    "\1\0\1\25\2\0\1\73\21\0\1\73\3\0\17\25"+
    "\1\247\4\25\1\0\1\73\22\25\1\0\1\25\2\0"+
    "\1\73\21\0\1\73\3\0\1\250\23\25\1\0\1\73"+
    "\22\25\1\0\1\25\2\0\1\73\21\0\1\73\3\0"+
    "\2\25\1\251\21\25\1\0\1\73\22\25\1\0\1\25"+
    "\2\0\1\73\21\0\1\73\3\0\15\25\1\252\6\25"+
    "\1\0\1\73\22\25\1\0\1\25\2\0\1\73\21\0"+
    "\1\73\3\0\17\25\1\253\4\25\1\0\1\73\22\25"+
    "\1\0\1\25\2\0\1\73\21\0\1\73\3\0\1\254"+
    "\23\25\1\0\1\73\22\25\1\0\1\25\2\0\1\73"+
    "\21\0\1\73\3\0\6\25\1\255\15\25\1\0\1\73"+
    "\22\25\1\0\1\25\2\0\1\73\21\0\1\73\3\0"+
    "\24\25\1\0\1\73\1\256\21\25\1\0\1\25\2\0"+
    "\1\73\21\0\1\73\3\0\24\25\1\0\1\73\12\25"+
    "\1\257\7\25\1\0\1\25\2\0\1\73\21\0\1\73"+
    "\3\0\24\25\1\0\1\73\1\260\21\25\1\0\1\25"+
    "\2\0\1\73\21\0\1\73\3\0\24\25\1\0\1\73"+
    "\15\25\1\253\4\25\1\0\1\25\2\0\1\73\21\0"+
    "\1\73\3\0\24\25\1\0\1\73\6\25\1\255\13\25"+
    "\1\0\1\25\2\0\1\73\21\0\1\261\77\0\1\66"+
    "\1\0\1\262\101\0\1\263\3\0\24\263\1\0\23\263"+
    "\4\0\1\263\21\0\1\73\3\0\14\25\1\264\7\25"+
    "\1\0\1\73\22\25\1\0\1\25\2\0\1\73\21\0"+
    "\1\73\3\0\22\25\1\265\1\25\1\0\1\73\22\25"+
    "\1\0\1\25\2\0\1\73\21\0\1\73\3\0\4\25"+
    "\1\266\17\25\1\0\1\73\22\25\1\0\1\25\2\0"+
    "\1\73\21\0\1\73\3\0\23\25\1\267\1\0\1\73"+
    "\22\25\1\0\1\25\2\0\1\73\21\0\1\73\3\0"+
    "\12\25\1\270\11\25\1\0\1\73\22\25\1\0\1\25"+
    "\2\0\1\73\21\0\1\73\3\0\6\25\1\271\15\25"+
    "\1\0\1\73\22\25\1\0\1\25\2\0\1\73\21\0"+
    "\1\73\3\0\13\25\1\272\10\25\1\0\1\73\22\25"+
    "\1\0\1\25\2\0\1\73\21\0\1\73\3\0\24\25"+
    "\1\0\1\73\12\25\1\264\7\25\1\0\1\25\2\0"+
    "\1\73\21\0\1\73\3\0\24\25\1\0\1\73\20\25"+
    "\1\273\1\25\1\0\1\25\2\0\1\73\21\0\1\73"+
    "\3\0\24\25\1\0\1\73\21\25\1\267\1\0\1\25"+
    "\2\0\1\73\21\0\1\274\77\0\1\66\1\0\1\275"+
    "\101\0\1\276\3\0\24\276\1\0\23\276\4\0\1\276"+
    "\21\0\1\73\3\0\4\25\1\277\17\25\1\0\1\73"+
    "\22\25\1\0\1\25\2\0\1\73\17\0\1\300\1\0"+
    "\1\73\3\0\24\25\1\0\1\73\22\25\1\0\1\25"+
    "\2\0\1\73\21\0\1\73\3\0\1\301\23\25\1\0"+
    "\1\73\22\25\1\0\1\25\2\0\1\73\21\0\1\73"+
    "\3\0\17\25\1\302\4\25\1\0\1\73\22\25\1\0"+
    "\1\25\2\0\1\73\17\0\1\303\1\0\1\73\3\0"+
    "\24\25\1\0\1\73\22\25\1\0\1\25\2\0\1\73"+
    "\21\0\1\73\3\0\24\25\1\0\1\73\4\25\1\277"+
    "\15\25\1\0\1\25\2\0\1\73\21\0\1\304\77\0"+
    "\1\66\1\0\1\305\101\0\1\306\3\0\24\306\1\0"+
    "\23\306\4\0\1\306\45\0\1\307\55\0\1\73\3\0"+
    "\17\25\1\310\4\25\1\0\1\73\22\25\1\0\1\25"+
    "\2\0\1\73\21\0\1\73\3\0\1\311\23\25\1\0"+
    "\1\73\22\25\1\0\1\25\2\0\1\73\45\0\1\312"+
    "\55\0\1\313\77\0\1\66\1\0\1\314\101\0\1\315"+
    "\3\0\24\315\1\0\23\315\4\0\1\315\31\0\1\316"+
    "\71\0\1\73\3\0\4\25\1\317\17\25\1\0\1\73"+
    "\22\25\1\0\1\25\2\0\1\73\21\0\1\73\3\0"+
    "\13\25\1\320\10\25\1\0\1\73\22\25\1\0\1\25"+
    "\2\0\1\73\31\0\1\321\71\0\1\322\77\0\1\66"+
    "\1\0\1\323\101\0\1\324\3\0\24\324\1\0\23\324"+
    "\4\0\1\324\27\0\1\325\71\0\1\326\1\0\1\73"+
    "\3\0\24\25\1\0\1\73\22\25\1\0\1\25\2\0"+
    "\1\73\17\0\1\327\1\0\1\73\3\0\24\25\1\0"+
    "\1\73\22\25\1\0\1\25\2\0\1\73\27\0\1\330"+
    "\73\0\1\331\77\0\1\66\1\0\1\332\101\0\1\333"+
    "\3\0\24\333\1\0\23\333\4\0\1\333\46\0\1\334"+
    "\100\0\1\335\101\0\1\336\102\0\1\337\52\0\1\66"+
    "\1\0\1\340\101\0\1\341\3\0\24\341\1\0\23\341"+
    "\4\0\1\341\35\0\1\342\75\0\1\343\101\0\1\344"+
    "\105\0\1\345\63\0\1\66\1\0\1\346\101\0\1\347"+
    "\3\0\24\347\1\0\23\347\4\0\1\347\42\0\1\350"+
    "\66\0\1\351\101\0\1\352\114\0\1\353\56\0\1\66"+
    "\1\0\1\354\101\0\1\355\3\0\24\355\1\0\23\355"+
    "\4\0\1\355\41\0\1\356\106\0\1\357\101\0\1\360"+
    "\74\0\1\361\57\0\1\66\1\0\1\362\101\0\1\363"+
    "\3\0\24\363\1\0\23\363\4\0\1\363\35\0\1\364"+
    "\101\0\1\365\63\0\1\66\1\0\1\366\101\0\1\367"+
    "\3\0\24\367\1\0\23\367\4\0\1\367\42\0\1\370"+
    "\101\0\1\371\56\0\1\66\1\0\1\372\101\0\1\373"+
    "\3\0\24\373\1\0\23\373\4\0\1\373\41\0\1\374"+
    "\101\0\1\375\57\0\1\66\1\0\1\376\101\0\1\377"+
    "\3\0\24\377\1\0\23\377\4\0\1\377\17\0\1\66"+
    "\1\0\1\u0100\101\0\1\u0101\3\0\24\u0101\1\0\23\u0101"+
    "\4\0\1\u0101\17\0\1\66\1\0\1\u0102\101\0\1\u0103"+
    "\3\0\24\u0103\1\0\23\u0103\4\0\1\u0103\21\0\1\u0104"+
    "\3\0\24\u0104\1\0\23\u0104\4\0\1\u0104\21\0\1\u0105"+
    "\3\0\24\u0105\1\0\23\u0105\4\0\1\u0105\21\0\1\u0106"+
    "\3\0\24\u0106\1\0\23\u0106\4\0\1\u0106\21\0\1\u0107"+
    "\3\0\24\u0107\1\0\23\u0107\4\0\1\u0107\21\0\1\u0108"+
    "\3\0\24\u0108\1\0\23\u0108\4\0\1\u0108\21\0\1\u0109"+
    "\3\0\24\u0109\1\0\23\u0109\4\0\1\u0109\21\0\1\u010a"+
    "\3\0\24\u010a\1\0\23\u010a\4\0\1\u010a\21\0\1\u010b"+
    "\3\0\24\u010b\1\0\23\u010b\4\0\1\u010b\21\0\1\u010c"+
    "\3\0\24\u010c\1\0\23\u010c\4\0\1\u010c\21\0\1\u010d"+
    "\3\0\24\u010d\1\0\23\u010d\4\0\1\u010d\21\0\1\u010e"+
    "\3\0\24\u010e\1\0\23\u010e\4\0\1\u010e\21\0\1\u010f"+
    "\3\0\24\u010f\1\0\23\u010f\4\0\1\u010f\21\0\1\u0110"+
    "\3\0\24\u0110\1\0\23\u0110\4\0\1\u0110\21\0\1\u0111"+
    "\3\0\24\u0111\1\0\23\u0111\4\0\1\u0111\21\0\1\u0112"+
    "\3\0\24\u0112\1\0\23\u0112\4\0\1\u0112\21\0\1\u0113"+
    "\3\0\24\u0113\1\0\23\u0113\4\0\1\u0113\21\0\1\u0114"+
    "\3\0\24\u0114\1\0\23\u0114\4\0\1\u0114\21\0\1\u0115"+
    "\3\0\24\u0115\1\0\23\u0115\4\0\1\u0115\21\0\1\u0116"+
    "\3\0\24\u0116\1\0\23\u0116\4\0\1\u0116\21\0\1\u0117"+
    "\3\0\24\u0117\1\0\23\u0117\4\0\1\u0117\21\0\1\u0118"+
    "\3\0\24\u0118\1\0\23\u0118\4\0\1\u0118\21\0\1\u0119"+
    "\3\0\24\u0119\1\0\23\u0119\4\0\1\u0119\21\0\1\u011a"+
    "\3\0\24\u011a\1\0\23\u011a\4\0\1\u011a\21\0\1\u011b"+
    "\3\0\24\u011b\1\0\23\u011b\4\0\1\u011b\21\0\1\u011c"+
    "\3\0\24\u011c\1\0\23\u011c\4\0\1\u011c\21\0\1\u011d"+
    "\3\0\24\u011d\1\0\23\u011d\4\0\1\u011d\21\0\1\u011e"+
    "\3\0\24\u011e\1\0\23\u011e\4\0\1\u011e\21\0\1\u011f"+
    "\3\0\24\u011f\1\0\23\u011f\4\0\1\u011f\21\0\1\u0120"+
    "\3\0\24\u0120\1\0\23\u0120\4\0\1\u0120\1\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[15972];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\11\2\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\1\3\11\26\1\1\11\1\1\1\11\1\1\2\11"+
    "\1\1\1\11\2\1\2\11\1\1\2\11\1\0\1\1"+
    "\3\11\34\1\7\11\142\1\1\0\2\1\1\0\3\1"+
    "\1\0\2\1\1\0\3\1\1\0\2\1\1\0\3\1"+
    "\4\0\1\11\2\1\4\0\2\1\4\0\2\1\4\0"+
    "\2\1\1\11\2\0\1\11\2\1\2\0\2\1\2\0"+
    "\2\1\2\11\4\1\1\0\35\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[288];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    /*************************************************************************
    * En esta sección se puede incluir código que se copiará textualmente
    * como parte de la definición de la clase del analizador léxico.
    * Típicamente serán variables de instancia o nuevos métodos de la clase.
    *************************************************************************/

    int string_yyline = 0;
    int string_yycolumn = 0;
    int count_comentario = 0;
    int cota_string = 100;


    StringBuffer string = new StringBuffer();

    private MiToken token(String nombre) {
        return new MiToken(nombre, this.yyline, this.yycolumn);
    }

    private MiToken token(String nombre, Object valor) {
        return new MiToken(nombre, this.yyline, this.yycolumn, valor);
    }

    private MiToken token(String nombre, int line, int column, Object valor) {
        if(nombre.equals("STRING_LITERAL")){
            if(valor.toString().length() <= cota_string){
                return new MiToken(nombre, line, column, valor);
            }else{
                throw new Error("Supera la cantidad de caracteres permitidos");
            }
        }    
        return new MiToken(nombre, line, column, valor);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MiLexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public MiToken yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case STRING: {
              throw new Error("String no balanceado");
            }  // fall though
            case 289: break;
            case Comentario: {
              { throw new Error("Comentario no balanceado");}
            }  // fall though
            case 290: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new Error("Caracter ilegal <"+yytext()+"> ");
            }
          // fall through
          case 54: break;
          case 2:
            { /* ignore */
            }
          // fall through
          case 55: break;
          case 3:
            { string.setLength(0);
          yybegin(STRING);
          string_yyline = this.yyline;
          string_yycolumn = this.yycolumn;
            }
          // fall through
          case 56: break;
          case 4:
            { /*ignore*/
            }
          // fall through
          case 57: break;
          case 5:
            { return token("OPERADOR_AND", yytext());
            }
          // fall through
          case 58: break;
          case 6:
            { return token("OPERADOR_ABRE", yytext());
            }
          // fall through
          case 59: break;
          case 7:
            { return token("OPERADOR_CIERRA", yytext());
            }
          // fall through
          case 60: break;
          case 8:
            { return token("OPERADOR_MULTI", yytext());
            }
          // fall through
          case 61: break;
          case 9:
            { return token("OPERADOR_SUMA", yytext());
            }
          // fall through
          case 62: break;
          case 10:
            { return token("OPERADOR_RESTA", yytext());
            }
          // fall through
          case 63: break;
          case 11:
            { return token("OPERADOR_DIV", yytext());
            }
          // fall through
          case 64: break;
          case 12:
            { return token("CONST_INT", yytext());
            }
          // fall through
          case 65: break;
          case 13:
            { return token("OPERADOR_MAYOR", yytext());
            }
          // fall through
          case 66: break;
          case 14:
            { return token("ASIGNACION", yytext());
            }
          // fall through
          case 67: break;
          case 15:
            { return token("OPERADOR_MENOR", yytext());
            }
          // fall through
          case 68: break;
          case 16:
            { return token("VAR", yytext());
            }
          // fall through
          case 69: break;
          case 17:
            { return token("LLAVE_ABRE", yytext());
            }
          // fall through
          case 70: break;
          case 18:
            { return token("OPERADOR_OR", yytext());
            }
          // fall through
          case 71: break;
          case 19:
            { return token("LLAVE_CIERRA", yytext());
            }
          // fall through
          case 72: break;
          case 20:
            { string.append( yytext() );
            }
          // fall through
          case 73: break;
          case 21:
            { yybegin(YYINITIAL);
          {return token("STRING_LITERAL", string_yyline, string_yycolumn, string.toString());}
            }
          // fall through
          case 74: break;
          case 22:
            { string.append('\\');
            }
          // fall through
          case 75: break;
          case 23:
            { 
            }
          // fall through
          case 76: break;
          case 24:
            { return token("OPERADOR_DISTINTO", yytext());
            }
          // fall through
          case 77: break;
          case 25:
            { yybegin(Comentario);
          count_comentario+=1;
            }
          // fall through
          case 78: break;
          case 26:
            { throw new Error("Comentario no balanceado");
            }
          // fall through
          case 79: break;
          case 27:
            { return token("OPERADOR_MAYOR_IGUAL", yytext());
            }
          // fall through
          case 80: break;
          case 28:
            { return token("OPERADOR_IGUAL", yytext());
            }
          // fall through
          case 81: break;
          case 29:
            { return token("OPERADOR_MENOR_IGUAL", yytext());
            }
          // fall through
          case 82: break;
          case 30:
            { return token("DO", yytext());
            }
          // fall through
          case 83: break;
          case 31:
            { return token("OPERADOR_NOT", yytext());
            }
          // fall through
          case 84: break;
          case 32:
            { string.append('\"');
            }
          // fall through
          case 85: break;
          case 33:
            { string.append('\n');
            }
          // fall through
          case 86: break;
          case 34:
            { string.append('\r');
            }
          // fall through
          case 87: break;
          case 35:
            { string.append('\t');
            }
          // fall through
          case 88: break;
          case 36:
            { count_comentario+=1;
            }
          // fall through
          case 89: break;
          case 37:
            { count_comentario-=1;
      if (count_comentario==0){
          yybegin(YYINITIAL);
      }
            }
          // fall through
          case 90: break;
          case 38:
            { return token("CONST_FLOAT", yytext());
            }
          // fall through
          case 91: break;
          case 39:
            { return token("END", yytext());
            }
          // fall through
          case 92: break;
          case 40:
            { return token("FOR", yytext());
            }
          // fall through
          case 93: break;
          case 41:
            { return token("INT_TYPE", yytext());
            }
          // fall through
          case 94: break;
          case 42:
            { return token("CONST_BOOL", yytext());
            }
          // fall through
          case 95: break;
          case 43:
            { return token("BREAK", yytext());
            }
          // fall through
          case 96: break;
          case 44:
            { return token("FLOAT_TYPE", yytext());
            }
          // fall through
          case 97: break;
          case 45:
            { return token("FILTER", yytext());
            }
          // fall through
          case 98: break;
          case 46:
            { return token("STRING_TYPE", yytext());
            }
          // fall through
          case 99: break;
          case 47:
            { return token("BOOLEAN_TYPE", yytext());
            }
          // fall through
          case 100: break;
          case 48:
            { return token("DISPLAY", yytext());
            }
          // fall through
          case 101: break;
          case 49:
            { return token("CONTINUE", yytext());
            }
          // fall through
          case 102: break;
          case 50:
            { return token("DECLARE_SECTION", yytext());
            }
          // fall through
          case 103: break;
          case 51:
            { return token("PROGRAM_SECTION", yytext());
            }
          // fall through
          case 104: break;
          case 52:
            { return token("ENDDECLARE_SECTION", yytext());
            }
          // fall through
          case 105: break;
          case 53:
            { return token("END_PROGRAM_SECTION", yytext());
            }
          // fall through
          case 106: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
