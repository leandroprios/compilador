// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/main/resources/lexico.flex

/* JFlex example: partial Java language lexer specification */
package edu.unnoba.compiladores.compilador_unnoba_2023;

/**
 * This class is a simple example lexer.
 */

@SuppressWarnings("fallthrough")
public class MiLexico {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u1100\1\u1200\1\u1300\1\u1400\1\u1100\1\u1500\1\u1600"+
    "\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u1c00\1\u1100\1\u1d00"+
    "\1\u1e00\1\u1f00\2\u2000\1\u2100\7\u2000\1\u2200\1\u2300\1\u2400"+
    "\1\u2000\1\u2500\1\u2600\2\u2000\31\u1100\1\u2700\121\u1100\1\u2800"+
    "\4\u1100\1\u2900\1\u1100\1\u2a00\1\u2b00\1\u2c00\1\u2d00\1\u2e00"+
    "\1\u2f00\53\u1100\1\u3000\10\u3100\31\u2000\1\u1100\1\u3200\1\u3300"+
    "\1\u1100\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u3b00\1\u3c00\1\u1100\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u2000\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800"+
    "\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u4f00\1\u2000"+
    "\1\u5000\1\u5100\1\u5200\1\u2000\3\u1100\1\u5300\1\u5400\1\u5500"+
    "\12\u2000\4\u1100\1\u5600\17\u2000\2\u1100\1\u5700\41\u2000\2\u1100"+
    "\1\u5800\1\u5900\2\u2000\1\u5a00\1\u5b00\27\u1100\1\u5c00\2\u1100"+
    "\1\u5d00\45\u2000\1\u1100\1\u5e00\1\u5f00\11\u2000\1\u6000\24\u2000"+
    "\1\u6100\1\u6200\1\u2000\1\u6300\1\u6400\1\u6500\1\u6600\2\u2000"+
    "\1\u6700\5\u2000\1\u6800\1\u6900\1\u6a00\5\u2000\1\u6b00\1\u6c00"+
    "\4\u2000\1\u6d00\2\u2000\1\u6e00\16\u2000\246\u1100\1\u6f00\20\u1100"+
    "\1\u7000\1\u7100\25\u1100\1\u7200\34\u1100\1\u7300\14\u2000\2\u1100"+
    "\1\u7400\u0b06\u2000\1\u2800\u02fe\u2000";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\12\0\1\1\1\2\1\3\1\4\23\0\1\5\1\6"+
    "\3\0\1\7\1\0\1\10\1\11\1\12\1\13\1\0"+
    "\1\14\1\15\1\16\12\17\2\0\1\20\1\21\1\22"+
    "\2\0\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\32\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\32\1\42\1\43\1\44\1\45\5\32\1\0"+
    "\1\46\2\0\1\47\1\0\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\2\32\1\56\1\32\1\57\1\60\1\32"+
    "\1\61\1\62\2\32\1\63\1\32\1\64\1\65\5\32"+
    "\1\66\1\67\1\70\7\0\1\2\44\0\1\47\1\0"+
    "\1\71\10\0\1\47\4\0\1\47\5\0\2\47\1\72"+
    "\24\47\1\0\37\47\1\0\u01ca\47\4\0\14\47\16\0"+
    "\5\47\7\0\1\47\1\0\1\47\21\0\165\47\1\0"+
    "\2\47\2\0\4\47\1\0\1\47\6\0\1\47\1\0"+
    "\3\47\1\0\1\47\1\0\24\47\1\0\123\47\1\0"+
    "\213\47\1\0\255\47\1\0\46\47\2\0\1\47\6\0"+
    "\51\47\10\0\55\47\1\0\1\47\1\0\2\47\1\0"+
    "\2\47\1\0\1\47\10\0\33\47\4\0\4\47\35\0"+
    "\13\47\5\0\112\47\4\0\146\47\1\0\10\47\2\0"+
    "\12\47\1\0\23\47\2\0\1\47\20\0\73\47\2\0"+
    "\145\47\16\0\66\47\4\0\1\47\2\0\1\47\2\0"+
    "\56\47\22\0\34\47\4\0\13\47\65\0\25\47\1\0"+
    "\10\47\25\0\17\47\1\0\201\47\2\0\12\47\1\0"+
    "\23\47\1\0\10\47\2\0\2\47\2\0\26\47\1\0"+
    "\7\47\1\0\1\47\3\0\4\47\2\0\11\47\2\0"+
    "\2\47\2\0\4\47\10\0\1\47\4\0\2\47\1\0"+
    "\5\47\2\0\14\47\12\0\1\47\1\0\1\47\2\0"+
    "\3\47\1\0\6\47\4\0\2\47\2\0\26\47\1\0"+
    "\7\47\1\0\2\47\1\0\2\47\1\0\2\47\2\0"+
    "\1\47\1\0\5\47\4\0\2\47\2\0\3\47\3\0"+
    "\1\47\7\0\4\47\1\0\1\47\7\0\20\47\13\0"+
    "\3\47\1\0\11\47\1\0\3\47\1\0\26\47\1\0"+
    "\7\47\1\0\2\47\1\0\5\47\2\0\12\47\1\0"+
    "\3\47\1\0\3\47\2\0\1\47\17\0\4\47\2\0"+
    "\12\47\11\0\7\47\1\0\3\47\1\0\10\47\2\0"+
    "\2\47\2\0\26\47\1\0\7\47\1\0\2\47\1\0"+
    "\5\47\2\0\11\47\2\0\2\47\2\0\3\47\10\0"+
    "\2\47\4\0\2\47\1\0\5\47\2\0\12\47\1\0"+
    "\1\47\20\0\2\47\1\0\6\47\3\0\3\47\1\0"+
    "\4\47\3\0\2\47\1\0\1\47\1\0\2\47\3\0"+
    "\2\47\3\0\3\47\3\0\14\47\4\0\5\47\3\0"+
    "\3\47\1\0\4\47\2\0\1\47\6\0\1\47\16\0"+
    "\12\47\20\0\15\47\1\0\3\47\1\0\27\47\1\0"+
    "\20\47\3\0\10\47\1\0\3\47\1\0\4\47\7\0"+
    "\2\47\1\0\3\47\5\0\4\47\2\0\12\47\20\0"+
    "\4\47\1\0\10\47\1\0\3\47\1\0\27\47\1\0"+
    "\12\47\1\0\5\47\2\0\11\47\1\0\3\47\1\0"+
    "\4\47\7\0\2\47\7\0\1\47\1\0\4\47\2\0"+
    "\12\47\1\0\2\47\15\0\4\47\1\0\10\47\1\0"+
    "\3\47\1\0\63\47\1\0\3\47\1\0\5\47\5\0"+
    "\4\47\7\0\5\47\2\0\12\47\12\0\6\47\2\0"+
    "\2\47\1\0\22\47\3\0\30\47\1\0\11\47\1\0"+
    "\1\47\2\0\7\47\3\0\1\47\4\0\6\47\1\0"+
    "\1\47\1\0\10\47\6\0\12\47\2\0\2\47\15\0"+
    "\72\47\5\0\17\47\1\0\12\47\47\0\2\47\1\0"+
    "\1\47\1\0\5\47\1\0\30\47\1\0\1\47\1\0"+
    "\27\47\2\0\5\47\1\0\1\47\1\0\6\47\2\0"+
    "\12\47\2\0\4\47\40\0\1\47\27\0\2\47\6\0"+
    "\12\47\13\0\1\47\1\0\1\47\1\0\1\47\4\0"+
    "\12\47\1\0\44\47\4\0\24\47\1\0\22\47\1\0"+
    "\44\47\11\0\1\47\71\0\112\47\6\0\116\47\2\0"+
    "\46\47\1\0\1\47\5\0\1\47\2\0\53\47\1\0"+
    "\u014d\47\1\0\4\47\2\0\7\47\1\0\1\47\1\0"+
    "\4\47\2\0\51\47\1\0\4\47\2\0\41\47\1\0"+
    "\4\47\2\0\7\47\1\0\1\47\1\0\4\47\2\0"+
    "\17\47\1\0\71\47\1\0\4\47\2\0\103\47\2\0"+
    "\3\47\40\0\20\47\20\0\126\47\2\0\6\47\3\0"+
    "\u016c\47\2\0\21\47\1\0\32\47\5\0\113\47\3\0"+
    "\13\47\7\0\15\47\1\0\7\47\13\0\25\47\13\0"+
    "\24\47\14\0\15\47\1\0\3\47\1\0\2\47\14\0"+
    "\124\47\3\0\1\47\4\0\2\47\2\0\12\47\41\0"+
    "\3\47\2\0\12\47\6\0\131\47\7\0\53\47\5\0"+
    "\106\47\12\0\37\47\1\0\14\47\4\0\14\47\12\0"+
    "\50\47\2\0\5\47\13\0\54\47\4\0\32\47\6\0"+
    "\12\47\46\0\34\47\4\0\77\47\1\0\35\47\2\0"+
    "\13\47\6\0\12\47\15\0\1\47\10\0\17\47\101\0"+
    "\114\47\4\0\12\47\21\0\11\47\14\0\164\47\14\0"+
    "\70\47\10\0\12\47\3\0\61\47\2\0\11\47\7\0"+
    "\53\47\2\0\3\47\20\0\3\47\1\0\47\47\5\0"+
    "\372\47\1\0\33\47\2\0\6\47\2\0\46\47\2\0"+
    "\6\47\2\0\10\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\37\47\2\0\65\47\1\0\7\47\1\0"+
    "\1\47\3\0\3\47\1\0\7\47\3\0\4\47\2\0"+
    "\6\47\4\0\15\47\5\0\3\47\1\0\7\47\53\0"+
    "\2\2\25\0\2\47\23\0\1\47\34\0\1\47\15\0"+
    "\1\47\20\0\15\47\63\0\41\47\21\0\1\47\4\0"+
    "\1\47\2\0\12\47\1\0\1\47\3\0\5\47\6\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\4\47\1\0"+
    "\13\47\2\0\4\47\5\0\5\47\4\0\1\47\21\0"+
    "\51\47\u022d\0\64\47\26\0\57\47\1\0\57\47\1\0"+
    "\205\47\6\0\11\47\14\0\46\47\1\0\1\47\5\0"+
    "\1\47\2\0\70\47\7\0\1\47\17\0\30\47\11\0"+
    "\7\47\1\0\7\47\1\0\7\47\1\0\7\47\1\0"+
    "\7\47\1\0\7\47\1\0\7\47\1\0\7\47\1\0"+
    "\40\47\57\0\1\47\325\0\3\47\31\0\17\47\1\0"+
    "\5\47\2\0\5\47\4\0\126\47\2\0\2\47\2\0"+
    "\3\47\1\0\132\47\1\0\4\47\5\0\53\47\1\0"+
    "\136\47\21\0\33\47\65\0\306\47\112\0\360\47\20\0"+
    "\215\47\103\0\56\47\2\0\15\47\3\0\34\47\24\0"+
    "\63\47\1\0\12\47\1\0\163\47\45\0\11\47\2\0"+
    "\147\47\2\0\65\47\2\0\5\47\60\0\61\47\30\0"+
    "\64\47\14\0\106\47\12\0\12\47\6\0\30\47\3\0"+
    "\1\47\1\0\61\47\2\0\44\47\14\0\35\47\3\0"+
    "\101\47\16\0\13\47\6\0\37\47\1\0\67\47\11\0"+
    "\16\47\2\0\12\47\6\0\27\47\3\0\111\47\30\0"+
    "\3\47\2\0\20\47\2\0\5\47\12\0\6\47\2\0"+
    "\6\47\2\0\6\47\11\0\7\47\1\0\7\47\1\0"+
    "\53\47\1\0\14\47\10\0\173\47\1\0\2\47\2\0"+
    "\12\47\6\0\244\47\14\0\27\47\4\0\61\47\4\0"+
    "\u0100\73\156\47\2\0\152\47\46\0\7\47\14\0\5\47"+
    "\5\0\14\47\1\0\15\47\1\0\5\47\1\0\1\47"+
    "\1\0\2\47\1\0\2\47\1\0\154\47\41\0\153\47"+
    "\22\0\100\47\2\0\66\47\50\0\14\47\4\0\20\47"+
    "\20\0\20\47\3\0\2\47\30\0\3\47\40\0\5\47"+
    "\1\0\207\47\23\0\12\47\7\0\32\47\4\0\1\47"+
    "\1\0\32\47\13\0\131\47\3\0\6\47\2\0\6\47"+
    "\2\0\6\47\2\0\3\47\43\0\14\47\1\0\32\47"+
    "\1\0\23\47\1\0\2\47\1\0\17\47\2\0\16\47"+
    "\42\0\173\47\105\0\65\47\210\0\1\47\202\0\35\47"+
    "\3\0\61\47\17\0\1\47\37\0\40\47\15\0\36\47"+
    "\5\0\53\47\5\0\36\47\2\0\44\47\4\0\10\47"+
    "\1\0\5\47\52\0\236\47\2\0\12\47\6\0\44\47"+
    "\4\0\44\47\4\0\50\47\10\0\64\47\234\0\67\47"+
    "\11\0\26\47\12\0\10\47\230\0\6\47\2\0\1\47"+
    "\1\0\54\47\1\0\2\47\3\0\1\47\2\0\27\47"+
    "\12\0\27\47\11\0\37\47\101\0\23\47\1\0\2\47"+
    "\12\0\26\47\12\0\32\47\106\0\70\47\6\0\2\47"+
    "\100\0\4\47\1\0\2\47\5\0\10\47\1\0\3\47"+
    "\1\0\35\47\2\0\3\47\4\0\1\47\40\0\35\47"+
    "\3\0\35\47\43\0\10\47\1\0\36\47\31\0\66\47"+
    "\12\0\26\47\12\0\23\47\15\0\22\47\156\0\111\47"+
    "\67\0\63\47\15\0\63\47\15\0\50\47\10\0\12\47"+
    "\306\0\35\47\12\0\1\47\10\0\41\47\217\0\27\47"+
    "\11\0\107\47\37\0\12\47\17\0\74\47\25\0\31\47"+
    "\7\0\12\47\6\0\65\47\1\0\12\47\4\0\3\47"+
    "\11\0\44\47\2\0\1\47\11\0\105\47\4\0\4\47"+
    "\3\0\13\47\1\0\1\47\43\0\22\47\1\0\45\47"+
    "\6\0\1\47\101\0\7\47\1\0\1\47\1\0\4\47"+
    "\1\0\17\47\1\0\12\47\7\0\73\47\5\0\12\47"+
    "\6\0\4\47\1\0\10\47\2\0\2\47\2\0\26\47"+
    "\1\0\7\47\1\0\2\47\1\0\5\47\1\0\12\47"+
    "\2\0\2\47\2\0\3\47\2\0\1\47\6\0\1\47"+
    "\5\0\7\47\2\0\7\47\3\0\5\47\213\0\113\47"+
    "\5\0\12\47\4\0\2\47\40\0\106\47\1\0\1\47"+
    "\10\0\12\47\246\0\66\47\2\0\11\47\27\0\6\47"+
    "\42\0\101\47\3\0\1\47\13\0\12\47\46\0\71\47"+
    "\7\0\12\47\66\0\33\47\2\0\17\47\4\0\12\47"+
    "\306\0\73\47\145\0\112\47\25\0\1\47\240\0\10\47"+
    "\2\0\56\47\2\0\10\47\1\0\2\47\33\0\77\47"+
    "\10\0\1\47\10\0\112\47\3\0\1\47\42\0\71\47"+
    "\7\0\11\47\1\0\55\47\1\0\11\47\17\0\12\47"+
    "\30\0\36\47\2\0\26\47\1\0\16\47\111\0\7\47"+
    "\1\0\2\47\1\0\54\47\3\0\1\47\1\0\2\47"+
    "\1\0\11\47\10\0\12\47\6\0\6\47\1\0\2\47"+
    "\1\0\45\47\1\0\2\47\1\0\6\47\7\0\12\47"+
    "\u0136\0\27\47\11\0\232\47\146\0\157\47\21\0\304\47"+
    "\274\0\57\47\321\0\107\47\271\0\71\47\7\0\37\47"+
    "\1\0\12\47\146\0\36\47\2\0\5\47\13\0\67\47"+
    "\11\0\4\47\14\0\12\47\11\0\25\47\5\0\23\47"+
    "\260\0\100\47\200\0\113\47\4\0\71\47\7\0\21\47"+
    "\100\0\2\47\1\0\1\47\34\0\370\47\10\0\363\47"+
    "\15\0\37\47\61\0\3\47\21\0\4\47\10\0\u018c\47"+
    "\4\0\153\47\5\0\15\47\3\0\11\47\7\0\12\47"+
    "\3\0\2\47\306\0\5\47\3\0\6\47\10\0\10\47"+
    "\2\0\7\47\36\0\4\47\224\0\3\47\273\0\125\47"+
    "\1\0\107\47\1\0\2\47\2\0\1\47\2\0\2\47"+
    "\2\0\4\47\1\0\14\47\1\0\1\47\1\0\7\47"+
    "\1\0\101\47\1\0\4\47\2\0\10\47\1\0\7\47"+
    "\1\0\34\47\1\0\4\47\1\0\5\47\1\0\1\47"+
    "\3\0\7\47\1\0\u0154\47\2\0\31\47\1\0\31\47"+
    "\1\0\37\47\1\0\31\47\1\0\37\47\1\0\31\47"+
    "\1\0\37\47\1\0\31\47\1\0\37\47\1\0\31\47"+
    "\1\0\10\47\2\0\151\47\4\0\62\47\10\0\1\47"+
    "\16\0\1\47\26\0\5\47\1\0\17\47\120\0\7\47"+
    "\1\0\21\47\2\0\7\47\1\0\2\47\1\0\5\47"+
    "\325\0\55\47\3\0\16\47\2\0\12\47\4\0\1\47"+
    "\u0171\0\72\47\6\0\305\47\13\0\7\47\51\0\114\47"+
    "\4\0\12\47\246\0\4\47\1\0\33\47\1\0\2\47"+
    "\1\0\1\47\2\0\1\47\1\0\12\47\1\0\4\47"+
    "\1\0\1\47\1\0\1\47\6\0\1\47\4\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\3\47\1\0\2\47"+
    "\1\0\1\47\2\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\2\47\1\0\1\47"+
    "\2\0\4\47\1\0\7\47\1\0\4\47\1\0\4\47"+
    "\1\0\1\47\1\0\12\47\1\0\21\47\5\0\3\47"+
    "\1\0\5\47\1\0\21\47\164\0\32\47\6\0\32\47"+
    "\6\0\32\47\166\0\327\47\51\0\65\47\13\0\336\47"+
    "\2\0\u0182\47\16\0\u0131\47\37\0\36\47\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29952];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\2\1\1\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\1\1\13\1\14"+
    "\1\15\14\16\1\17\1\20\1\21\2\1\1\22\1\23"+
    "\1\22\1\24\2\25\1\1\1\26\1\27\1\30\4\16"+
    "\1\31\11\16\1\32\2\1\1\33\1\34\1\1\3\16"+
    "\1\35\1\16\1\36\3\16\1\35\1\16\3\1\12\16"+
    "\2\37\3\1\1\40\10\16\1\41\3\1\4\16\1\42"+
    "\2\16\3\1\6\16\3\1\1\43\1\1\2\16\5\1"+
    "\2\16\5\1\2\16\36\1\1\44\2\1\1\45\12\1"+
    "\1\46\1\47\6\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[197];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\360\0\u012c\0\u0168"+
    "\0\264\0\264\0\264\0\264\0\264\0\264\0\264\0\u01a4"+
    "\0\u01e0\0\u021c\0\u0258\0\u0294\0\u02d0\0\u030c\0\u0348\0\u0384"+
    "\0\u03c0\0\u03fc\0\u0438\0\u0474\0\u04b0\0\u04ec\0\u0528\0\264"+
    "\0\u0294\0\264\0\u0564\0\u05a0\0\360\0\360\0\u05dc\0\264"+
    "\0\360\0\u0618\0\u0654\0\264\0\264\0\264\0\u0690\0\u06cc"+
    "\0\u0708\0\u0744\0\u0294\0\u0780\0\u07bc\0\u07f8\0\u0834\0\u0870"+
    "\0\u08ac\0\u08e8\0\u0924\0\u0960\0\264\0\u099c\0\u09d8\0\360"+
    "\0\360\0\u0a14\0\u0a50\0\u0a8c\0\u0ac8\0\u0b04\0\u0b40\0\u0294"+
    "\0\u0b7c\0\u0bb8\0\u0bf4\0\u0294\0\u0c30\0\u0c6c\0\u0ca8\0\u0ce4"+
    "\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c\0\u0e88\0\u0ec4"+
    "\0\u0f00\0\u0f3c\0\360\0\u0f78\0\u0fb4\0\u0ff0\0\u102c\0\u0294"+
    "\0\u1068\0\u10a4\0\u10e0\0\u111c\0\u1158\0\u1194\0\u11d0\0\u120c"+
    "\0\360\0\u1248\0\u1284\0\u12c0\0\u12fc\0\u1338\0\u1374\0\u13b0"+
    "\0\u0294\0\u13ec\0\u1428\0\u1464\0\u14a0\0\u14dc\0\u1518\0\u1554"+
    "\0\u1590\0\u15cc\0\u1608\0\u1644\0\u1680\0\u16bc\0\u16f8\0\u0294"+
    "\0\u1734\0\u1770\0\u17ac\0\u17e8\0\u1824\0\u1860\0\u189c\0\u18d8"+
    "\0\u1914\0\u1950\0\u198c\0\u19c8\0\u1a04\0\u1a40\0\u1a7c\0\u1ab8"+
    "\0\u1af4\0\u1b30\0\u1b6c\0\u1ba8\0\u1be4\0\u1c20\0\u1c5c\0\u1c98"+
    "\0\u1cd4\0\u1d10\0\u1d4c\0\u1d88\0\u1dc4\0\u1e00\0\u1e3c\0\u1e78"+
    "\0\u1eb4\0\u1ef0\0\u1f2c\0\u1f68\0\u1fa4\0\u1fe0\0\u201c\0\u2058"+
    "\0\u2094\0\u20d0\0\u210c\0\u2148\0\u2184\0\u21c0\0\u21fc\0\264"+
    "\0\u2238\0\u2274\0\264\0\u22b0\0\u22ec\0\u2328\0\u2364\0\u23a0"+
    "\0\u23dc\0\u2418\0\u2454\0\u2490\0\u24cc\0\264\0\264\0\u2508"+
    "\0\u2544\0\u2580\0\u25bc\0\u25f8\0\u2634";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[197];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\5\1\7\1\10\1\4\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\4\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\10\24\1\32\4\24\2\4\1\24\1\33\1\34"+
    "\1\35\1\36\1\37\10\24\1\40\1\41\1\42\1\4"+
    "\1\43\1\6\1\4\1\5\1\6\1\5\1\7\1\10"+
    "\1\4\1\11\1\12\1\13\1\14\1\15\1\16\1\4"+
    "\1\17\1\44\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\10\24\1\32\4\24\2\4\1\24"+
    "\1\33\1\34\1\35\1\36\1\37\10\24\1\40\1\41"+
    "\1\42\1\4\1\43\1\6\6\45\1\46\37\45\1\47"+
    "\25\45\1\4\4\0\66\4\76\0\1\5\72\0\1\4"+
    "\4\0\14\4\1\50\51\4\1\0\1\4\3\51\1\52"+
    "\12\4\1\53\53\4\1\0\1\4\4\0\14\4\1\54"+
    "\51\4\1\0\1\4\4\0\14\4\1\55\51\4\1\0"+
    "\1\4\4\0\14\4\1\56\51\4\1\0\1\4\4\0"+
    "\12\4\1\57\3\4\23\24\1\4\1\57\16\24\1\4"+
    "\1\24\2\4\1\57\1\0\1\4\4\0\12\4\1\57"+
    "\3\4\17\24\1\60\3\24\1\4\1\57\16\24\1\4"+
    "\1\24\2\4\1\57\1\0\1\4\4\0\12\4\1\57"+
    "\3\4\15\24\1\61\5\24\1\4\1\57\16\24\1\4"+
    "\1\24\2\4\1\57\1\0\1\4\4\0\12\4\1\57"+
    "\3\4\4\24\1\62\10\24\1\63\5\24\1\4\1\57"+
    "\16\24\1\4\1\24\2\4\1\57\1\0\1\4\4\0"+
    "\12\4\1\57\3\4\14\24\1\64\6\24\1\4\1\57"+
    "\16\24\1\4\1\24\2\4\1\57\1\0\1\4\4\0"+
    "\12\4\1\57\3\4\10\24\1\65\4\24\1\66\5\24"+
    "\1\4\1\57\16\24\1\4\1\24\2\4\1\57\1\0"+
    "\1\4\4\0\12\4\1\57\3\4\17\24\1\67\3\24"+
    "\1\4\1\57\16\24\1\4\1\24\2\4\1\57\1\0"+
    "\1\4\4\0\12\4\1\57\3\4\23\24\1\4\1\57"+
    "\13\24\1\70\2\24\1\4\1\24\2\4\1\57\1\0"+
    "\1\4\4\0\12\4\1\57\3\4\23\24\1\4\1\57"+
    "\12\24\1\71\3\24\1\4\1\24\2\4\1\57\1\0"+
    "\1\4\4\0\12\4\1\57\3\4\23\24\1\4\1\57"+
    "\12\24\1\63\3\24\1\4\1\24\2\4\1\57\1\0"+
    "\1\4\4\0\12\4\1\57\3\4\23\24\1\4\1\57"+
    "\11\24\1\72\4\24\1\4\1\24\2\4\1\57\1\0"+
    "\1\4\4\0\12\4\1\57\3\4\23\24\1\4\1\57"+
    "\6\24\1\73\3\24\1\74\3\24\1\4\1\24\2\4"+
    "\1\57\1\0\1\4\4\0\64\4\1\75\1\4\1\0"+
    "\1\4\3\51\1\52\10\4\1\76\1\4\1\77\53\4"+
    "\7\0\1\100\66\0\1\101\72\0\1\4\3\51\1\52"+
    "\12\4\1\102\53\4\1\0\1\4\4\0\12\4\1\57"+
    "\3\4\23\57\1\4\17\57\4\4\1\57\1\0\1\4"+
    "\4\0\12\4\1\57\3\4\4\24\1\103\16\24\1\4"+
    "\1\57\16\24\1\4\1\24\2\4\1\57\1\0\1\4"+
    "\4\0\12\4\1\57\3\4\14\24\1\104\6\24\1\4"+
    "\1\57\16\24\1\4\1\24\2\4\1\57\1\0\1\4"+
    "\4\0\12\4\1\57\3\4\2\24\1\105\20\24\1\4"+
    "\1\57\16\24\1\4\1\24\2\4\1\57\1\0\1\4"+
    "\4\0\12\4\1\57\3\4\3\24\1\106\17\24\1\4"+
    "\1\57\16\24\1\4\1\24\2\4\1\57\1\0\1\4"+
    "\4\0\12\4\1\57\3\4\12\24\1\107\10\24\1\4"+
    "\1\57\16\24\1\4\1\24\2\4\1\57\1\0\1\4"+
    "\4\0\12\4\1\57\3\4\17\24\1\110\3\24\1\4"+
    "\1\57\16\24\1\4\1\24\2\4\1\57\1\0\1\4"+
    "\4\0\12\4\1\57\3\4\15\24\1\111\5\24\1\4"+
    "\1\57\16\24\1\4\1\24\2\4\1\57\1\0\1\4"+
    "\4\0\12\4\1\57\3\4\23\24\1\4\1\57\4\24"+
    "\1\112\11\24\1\4\1\24\2\4\1\57\1\0\1\4"+
    "\4\0\12\4\1\57\3\4\23\24\1\4\1\57\11\24"+
    "\1\113\4\24\1\4\1\24\2\4\1\57\1\0\1\4"+
    "\4\0\12\4\1\57\3\4\23\24\1\4\1\57\3\24"+
    "\1\114\12\24\1\4\1\24\2\4\1\57\1\0\1\4"+
    "\4\0\12\4\1\57\3\4\23\24\1\4\1\57\10\24"+
    "\1\115\5\24\1\4\1\24\2\4\1\57\1\0\1\4"+
    "\4\0\12\4\1\57\3\4\23\24\1\4\1\57\13\24"+
    "\1\110\2\24\1\4\1\24\2\4\1\57\1\0\1\4"+
    "\4\0\12\4\1\116\53\4\1\0\1\4\3\51\1\52"+
    "\10\4\1\76\1\4\1\117\53\4\1\0\1\4\3\51"+
    "\1\52\12\4\1\120\53\4\1\0\1\4\4\0\12\4"+
    "\1\57\3\4\1\121\22\24\1\4\1\57\16\24\1\4"+
    "\1\24\2\4\1\57\1\0\1\4\4\0\12\4\1\57"+
    "\3\4\21\24\1\122\1\24\1\4\1\57\16\24\1\4"+
    "\1\24\2\4\1\57\1\0\1\4\4\0\12\4\1\57"+
    "\3\4\12\24\1\123\10\24\1\4\1\57\16\24\1\4"+
    "\1\24\2\4\1\57\1\0\1\4\4\0\12\4\1\57"+
    "\3\4\3\24\1\124\12\24\1\125\4\24\1\4\1\57"+
    "\16\24\1\4\1\24\2\4\1\57\1\0\1\4\4\0"+
    "\12\4\1\57\3\4\21\24\1\126\1\24\1\4\1\57"+
    "\16\24\1\4\1\24\2\4\1\57\1\0\1\4\4\0"+
    "\12\4\1\57\3\4\6\24\1\127\14\24\1\4\1\57"+
    "\16\24\1\4\1\24\2\4\1\57\1\0\1\4\4\0"+
    "\12\4\1\57\3\4\23\24\1\4\1\57\1\130\15\24"+
    "\1\4\1\24\2\4\1\57\1\0\1\4\4\0\12\4"+
    "\1\57\3\4\23\24\1\4\1\57\14\24\1\131\1\24"+
    "\1\4\1\24\2\4\1\57\1\0\1\4\4\0\12\4"+
    "\1\57\3\4\23\24\1\4\1\57\14\24\1\132\1\24"+
    "\1\4\1\24\2\4\1\57\1\0\1\4\3\133\1\134"+
    "\12\4\1\135\53\4\1\0\1\4\3\51\1\52\10\4"+
    "\1\76\1\4\1\136\53\4\1\0\1\4\3\51\1\52"+
    "\12\4\1\137\53\4\1\0\1\4\4\0\12\4\1\57"+
    "\3\4\11\24\1\140\11\24\1\4\1\57\16\24\1\4"+
    "\1\24\2\4\1\57\1\0\1\4\4\0\12\4\1\57"+
    "\3\4\10\24\1\141\12\24\1\4\1\57\16\24\1\4"+
    "\1\24\2\4\1\57\1\0\1\4\4\0\12\4\1\57"+
    "\3\4\1\142\22\24\1\4\1\57\16\24\1\4\1\24"+
    "\2\4\1\57\1\0\1\4\4\0\12\4\1\57\3\4"+
    "\4\24\1\143\16\24\1\4\1\57\16\24\1\4\1\24"+
    "\2\4\1\57\1\0\1\4\4\0\12\4\1\57\3\4"+
    "\17\24\1\144\3\24\1\4\1\57\16\24\1\4\1\24"+
    "\2\4\1\57\1\0\1\4\4\0\12\4\1\57\3\4"+
    "\4\24\1\145\16\24\1\4\1\57\16\24\1\4\1\24"+
    "\2\4\1\57\1\0\1\4\4\0\12\4\1\57\3\4"+
    "\17\24\1\146\3\24\1\4\1\57\16\24\1\4\1\24"+
    "\2\4\1\57\1\0\1\4\4\0\12\4\1\57\3\4"+
    "\23\24\1\4\1\57\7\24\1\140\6\24\1\4\1\24"+
    "\2\4\1\57\1\0\1\4\4\0\12\4\1\57\3\4"+
    "\23\24\1\4\1\57\6\24\1\147\7\24\1\4\1\24"+
    "\2\4\1\57\1\0\1\4\4\0\12\4\1\57\3\4"+
    "\23\24\1\4\1\57\4\24\1\150\11\24\1\4\1\24"+
    "\2\4\1\57\2\0\1\151\72\0\1\4\3\133\1\134"+
    "\12\4\1\152\53\4\1\0\1\4\3\51\1\52\10\4"+
    "\1\76\1\4\1\153\53\4\1\0\1\4\3\51\1\52"+
    "\12\4\1\154\53\4\1\0\1\4\4\0\12\4\1\57"+
    "\3\4\14\24\1\155\6\24\1\4\1\57\16\24\1\4"+
    "\1\24\2\4\1\57\1\0\1\4\4\0\12\4\1\57"+
    "\3\4\17\24\1\156\3\24\1\4\1\57\16\24\1\4"+
    "\1\24\2\4\1\57\1\0\1\4\4\0\12\4\1\57"+
    "\3\4\2\24\1\157\20\24\1\4\1\57\16\24\1\4"+
    "\1\24\2\4\1\57\1\0\1\4\4\0\12\4\1\57"+
    "\3\4\15\24\1\160\5\24\1\4\1\57\16\24\1\4"+
    "\1\24\2\4\1\57\1\0\1\4\4\0\12\4\1\57"+
    "\3\4\17\24\1\161\3\24\1\4\1\57\16\24\1\4"+
    "\1\24\2\4\1\57\1\0\1\4\4\0\12\4\1\57"+
    "\3\4\1\162\22\24\1\4\1\57\16\24\1\4\1\24"+
    "\2\4\1\57\1\0\1\4\4\0\12\4\1\57\3\4"+
    "\23\24\1\4\1\57\11\24\1\163\4\24\1\4\1\24"+
    "\2\4\1\57\1\0\1\4\4\0\12\4\1\57\3\4"+
    "\23\24\1\4\1\57\13\24\1\161\2\24\1\4\1\24"+
    "\2\4\1\57\1\0\1\4\3\133\1\134\12\4\1\164"+
    "\53\4\1\0\1\4\3\51\1\52\10\4\1\76\1\4"+
    "\1\165\53\4\1\0\1\4\3\51\1\52\12\4\1\166"+
    "\53\4\1\0\1\4\4\0\12\4\1\57\3\4\22\24"+
    "\1\167\1\4\1\57\16\24\1\4\1\24\2\4\1\57"+
    "\1\0\1\4\4\0\12\4\1\57\3\4\4\24\1\170"+
    "\16\24\1\4\1\57\16\24\1\4\1\24\2\4\1\57"+
    "\1\0\1\4\4\0\12\4\1\57\3\4\12\24\1\171"+
    "\10\24\1\4\1\57\16\24\1\4\1\24\2\4\1\57"+
    "\1\0\1\4\4\0\12\4\1\57\3\4\6\24\1\172"+
    "\14\24\1\4\1\57\16\24\1\4\1\24\2\4\1\57"+
    "\1\0\1\4\4\0\12\4\1\57\3\4\13\24\1\173"+
    "\7\24\1\4\1\57\16\24\1\4\1\24\2\4\1\57"+
    "\1\0\1\4\4\0\12\4\1\57\3\4\23\24\1\4"+
    "\1\57\15\24\1\174\1\4\1\24\2\4\1\57\1\0"+
    "\1\4\3\133\1\134\12\4\1\175\53\4\1\0\1\4"+
    "\3\51\1\52\10\4\1\76\1\4\1\176\53\4\1\0"+
    "\1\4\3\51\1\52\12\4\1\177\53\4\1\0\1\4"+
    "\4\0\12\4\1\57\3\4\4\24\1\200\16\24\1\4"+
    "\1\57\16\24\1\4\1\24\2\4\1\57\1\0\1\4"+
    "\4\0\10\4\1\201\1\4\1\57\3\4\23\24\1\4"+
    "\1\57\16\24\1\4\1\24\2\4\1\57\1\0\1\4"+
    "\4\0\12\4\1\57\3\4\1\202\22\24\1\4\1\57"+
    "\16\24\1\4\1\24\2\4\1\57\1\0\1\4\4\0"+
    "\12\4\1\57\3\4\17\24\1\203\3\24\1\4\1\57"+
    "\16\24\1\4\1\24\2\4\1\57\1\0\1\4\4\0"+
    "\10\4\1\204\1\4\1\57\3\4\23\24\1\4\1\57"+
    "\16\24\1\4\1\24\2\4\1\57\1\0\1\4\4\0"+
    "\12\4\1\57\3\4\23\24\1\4\1\57\4\24\1\200"+
    "\11\24\1\4\1\24\2\4\1\57\1\0\1\4\3\133"+
    "\1\134\12\4\1\205\53\4\1\0\1\4\3\51\1\52"+
    "\10\4\1\76\1\4\1\206\53\4\1\0\1\4\3\51"+
    "\1\52\12\4\1\207\53\4\1\0\1\4\4\0\36\4"+
    "\1\210\27\4\1\0\1\4\4\0\12\4\1\57\3\4"+
    "\17\24\1\211\3\24\1\4\1\57\16\24\1\4\1\24"+
    "\2\4\1\57\1\0\1\4\4\0\12\4\1\57\3\4"+
    "\1\212\22\24\1\4\1\57\16\24\1\4\1\24\2\4"+
    "\1\57\1\0\1\4\4\0\36\4\1\213\27\4\1\0"+
    "\1\4\3\133\1\134\12\4\1\214\53\4\1\0\1\4"+
    "\3\51\1\52\10\4\1\76\1\4\1\215\53\4\1\0"+
    "\1\4\3\51\1\52\12\4\1\216\53\4\1\0\1\4"+
    "\4\0\22\4\1\217\43\4\1\0\1\4\4\0\12\4"+
    "\1\57\3\4\4\24\1\220\16\24\1\4\1\57\16\24"+
    "\1\4\1\24\2\4\1\57\1\0\1\4\4\0\12\4"+
    "\1\57\3\4\13\24\1\221\7\24\1\4\1\57\16\24"+
    "\1\4\1\24\2\4\1\57\1\0\1\4\4\0\22\4"+
    "\1\222\43\4\1\0\1\4\3\133\1\134\12\4\1\223"+
    "\53\4\1\0\1\4\3\51\1\52\10\4\1\76\1\4"+
    "\1\224\53\4\1\0\1\4\3\51\1\52\12\4\1\225"+
    "\53\4\1\0\1\4\4\0\20\4\1\226\45\4\1\0"+
    "\1\4\4\0\10\4\1\227\1\4\1\57\3\4\23\24"+
    "\1\4\1\57\16\24\1\4\1\24\2\4\1\57\1\0"+
    "\1\4\4\0\10\4\1\230\1\4\1\57\3\4\23\24"+
    "\1\4\1\57\16\24\1\4\1\24\2\4\1\57\1\0"+
    "\1\4\4\0\20\4\1\231\45\4\1\0\1\4\3\133"+
    "\1\134\12\4\1\232\53\4\1\0\1\4\3\51\1\52"+
    "\10\4\1\76\1\4\1\233\53\4\1\0\1\4\3\51"+
    "\1\52\12\4\1\234\53\4\1\0\1\4\4\0\37\4"+
    "\1\235\26\4\1\0\1\4\4\0\36\4\1\236\27\4"+
    "\1\0\1\4\4\0\36\4\1\237\27\4\1\0\1\4"+
    "\4\0\37\4\1\240\26\4\1\0\1\4\3\133\1\134"+
    "\12\4\1\241\53\4\1\0\1\4\3\51\1\52\10\4"+
    "\1\76\1\4\1\242\53\4\1\0\1\4\3\51\1\52"+
    "\12\4\1\243\53\4\1\0\1\4\4\0\26\4\1\244"+
    "\37\4\1\0\1\4\4\0\22\4\1\245\43\4\1\0"+
    "\1\4\4\0\22\4\1\246\43\4\1\0\1\4\4\0"+
    "\26\4\1\247\37\4\1\0\1\4\3\133\1\134\66\4"+
    "\1\0\1\4\3\51\1\52\10\4\1\76\1\4\1\250"+
    "\53\4\1\0\1\4\3\51\1\52\12\4\1\251\53\4"+
    "\1\0\1\4\4\0\33\4\1\252\32\4\1\0\1\4"+
    "\4\0\20\4\1\253\45\4\1\0\1\4\4\0\20\4"+
    "\1\254\45\4\1\0\1\4\4\0\33\4\1\255\32\4"+
    "\1\0\1\4\3\51\1\52\10\4\1\76\1\4\1\256"+
    "\53\4\1\0\1\4\3\51\1\52\12\4\1\257\53\4"+
    "\1\0\1\4\4\0\32\4\1\260\33\4\1\0\1\4"+
    "\4\0\37\4\1\261\26\4\1\0\1\4\4\0\37\4"+
    "\1\262\26\4\1\0\1\4\4\0\32\4\1\263\33\4"+
    "\1\0\1\4\3\51\1\52\10\4\1\76\1\4\1\264"+
    "\53\4\1\0\1\4\3\51\1\52\12\4\1\265\53\4"+
    "\1\0\1\4\4\0\26\4\1\266\37\4\1\0\1\4"+
    "\4\0\26\4\1\267\37\4\1\0\1\4\3\51\1\52"+
    "\10\4\1\76\1\4\1\270\53\4\1\0\1\4\3\51"+
    "\1\52\12\4\1\271\53\4\1\0\1\4\4\0\33\4"+
    "\1\272\32\4\1\0\1\4\4\0\33\4\1\273\32\4"+
    "\1\0\1\4\3\51\1\52\10\4\1\76\1\4\1\274"+
    "\53\4\1\0\1\4\3\51\1\52\12\4\1\275\53\4"+
    "\1\0\1\4\4\0\32\4\1\276\33\4\1\0\1\4"+
    "\4\0\32\4\1\277\33\4\1\0\1\4\3\51\1\52"+
    "\10\4\1\76\1\4\1\300\53\4\1\0\1\4\3\51"+
    "\1\52\12\4\1\301\53\4\1\0\1\4\3\51\1\52"+
    "\10\4\1\76\1\4\1\302\53\4\1\0\1\4\3\51"+
    "\1\52\12\4\1\303\53\4\1\0\1\4\3\51\1\52"+
    "\10\4\1\76\1\4\1\304\53\4\1\0\1\4\3\51"+
    "\1\52\66\4\1\0\1\4\3\51\1\52\10\4\1\76"+
    "\1\4\1\305\53\4\1\0\1\4\4\0\10\4\1\76"+
    "\1\4\1\305\53\4\1\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[9840];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\1\2\11\36\1\2\11\2\1\1\11\26\1"+
    "\2\11\31\1\1\11\15\1\1\11\134\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[197];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    /*************************************************************************
    * En esta sección se puede incluir código que se copiará textualmente
    * como parte de la definición de la clase del analizador léxico.
    * Típicamente serán variables de instancia o nuevos métodos de la clase.
    *************************************************************************/

    int string_yyline = 0;
    int string_yycolumn = 0;

    StringBuffer string = new StringBuffer();

    private MiToken token(String nombre) {
        return new MiToken(nombre, this.yyline, this.yycolumn);
    }

    private MiToken token(String nombre, Object valor) {
        return new MiToken(nombre, this.yyline, this.yycolumn, valor);
    }

    private MiToken token(String nombre, int line, int column, Object valor) {
        return new MiToken(nombre, line, column, valor);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MiLexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public MiToken yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return token("CONST_STR", yytext());
            }
          // fall through
          case 40: break;
          case 2:
            { /* ignore */
            }
          // fall through
          case 41: break;
          case 3:
            { return token("ERROR_SINTAXIS", yytext());
            }
          // fall through
          case 42: break;
          case 4:
            { return token("OPERADOR_AND", yytext());
            }
          // fall through
          case 43: break;
          case 5:
            { return token("OPERADOR_ABRE", yytext());
            }
          // fall through
          case 44: break;
          case 6:
            { return token("OPERADOR_CIERRA", yytext());
            }
          // fall through
          case 45: break;
          case 7:
            { return token("OPERADOR_MULTI", yytext());
            }
          // fall through
          case 46: break;
          case 8:
            { return token("OPERADOR_SUMA", yytext());
            }
          // fall through
          case 47: break;
          case 9:
            { return token("OPERADOR_RESTA", yytext());
            }
          // fall through
          case 48: break;
          case 10:
            { return token("OPERADOR_DIV", yytext());
            }
          // fall through
          case 49: break;
          case 11:
            { return token("OPERADOR_MAYOR", yytext());
            }
          // fall through
          case 50: break;
          case 12:
            { return token("ASIGNACION", yytext());
            }
          // fall through
          case 51: break;
          case 13:
            { return token("OPERADOR_MENOR", yytext());
            }
          // fall through
          case 52: break;
          case 14:
            { return token("VAR", yytext());
            }
          // fall through
          case 53: break;
          case 15:
            { return token("LLAVE_ABRE", yytext());
            }
          // fall through
          case 54: break;
          case 16:
            { return token("OPERADOR_OR", yytext());
            }
          // fall through
          case 55: break;
          case 17:
            { return token("LLAVE_CIERRA", yytext());
            }
          // fall through
          case 56: break;
          case 18:
            { string.append( yytext() );
            }
          // fall through
          case 57: break;
          case 19:
            { yybegin(YYINITIAL);
                                   return token("STRING_LITERAL", string_yyline, string_yycolumn, string.toString());
            }
          // fall through
          case 58: break;
          case 20:
            { return token("OPERADOR_DISTINTO", yytext());
            }
          // fall through
          case 59: break;
          case 21:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            { return token("CONST_INT", yytext());
            }
          // fall through
          case 60: break;
          case 22:
            { return token("OPERADOR_MAYOR_IGUAL", yytext());
            }
          // fall through
          case 61: break;
          case 23:
            { return token("OPERADOR_IGUAL", yytext());
            }
          // fall through
          case 62: break;
          case 24:
            { return token("OPERADOR_MENOR_IGUAL", yytext());
            }
          // fall through
          case 63: break;
          case 25:
            { return token("DO", yytext());
            }
          // fall through
          case 64: break;
          case 26:
            { return token("OPERADOR_NOT", yytext());
            }
          // fall through
          case 65: break;
          case 27:
            { string.append('\"');
            }
          // fall through
          case 66: break;
          case 28:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -2);
            { return token("CONST_INT", yytext());
            }
          // fall through
          case 67: break;
          case 29:
            { return token("END", yytext());
            }
          // fall through
          case 68: break;
          case 30:
            { return token("FOR", yytext());
            }
          // fall through
          case 69: break;
          case 31:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            { return token("CONST_FLOAT", yytext());
            }
          // fall through
          case 70: break;
          case 32:
            { return token("BREAK", yytext());
            }
          // fall through
          case 71: break;
          case 33:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -2);
            { return token("CONST_FLOAT", yytext());
            }
          // fall through
          case 72: break;
          case 34:
            { return token("FILTER", yytext());
            }
          // fall through
          case 73: break;
          case 35:
            { return token("CONTINUE", yytext());
            }
          // fall through
          case 74: break;
          case 36:
            { return token("DECLARE_SECTION", yytext());
            }
          // fall through
          case 75: break;
          case 37:
            { return token("PROGRAM_SECTION", yytext());
            }
          // fall through
          case 76: break;
          case 38:
            { return token("ENDDECLARE_SECTION", yytext());
            }
          // fall through
          case 77: break;
          case 39:
            { return token("END_PROGRAM_SECTION", yytext());
            }
          // fall through
          case 78: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
