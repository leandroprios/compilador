;Programa: Prueba
source_filename = "Prueba.txt"
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-windows-msvc19.16.27038"


declare i32 @printf(i8*, ...)
declare i32 @puts(i8*)
declare i32 @scanf(i8* %0, ...)

@trueStr = private constant [6 x i8] c"true\0A\00"
@falseStr = private constant [7 x i8] c"false\0A\00"
define void @printBool(i1 %value) {
  %boolValue = zext i1 %value to i32
  br i1 %value, label %trueLabel, label %falseLabel
trueLabel:
  %formatStrTrue = getelementptr [6 x i8], [6 x i8]* @trueStr, i32 0, i32 0
  call i32 (i8*, ...) @printf(i8* %formatStrTrue, i32 %boolValue)
  br label %endLabel

falseLabel:
  %formatStrFalse = getelementptr [7 x i8], [7 x i8]* @falseStr, i32 0, i32 0
  call i32 (i8*, ...) @printf(i8* %formatStrFalse, i32 %boolValue)
  br label %endLabel

endLabel:
  ret void
}
@.integer = private constant [4 x i8] c"%d\0A\00"
@.float = private constant [5 x i8] c"%lf\0A\00"
@.int_read_format = unnamed_addr constant [3 x i8] c"%d\00"
@.double_read_format = unnamed_addr constant [4 x i8]  c"%lf\00"

@str85 = private constant [5 x i8] c"else\00"
@varlogica2 = global i1 0
@varlogica3 = global i1 0
@var1 = global i32 0
@var2 = global i32 0
@var3 = global i32 0
@i = global i32 0
@varlogica = global i1 0
@var4 = global i32 0
@var5 = global double 0.0
@var6 = global double 0.0
@var8 = global double 0.0

define i32 @main(i32, i8**) {
	%var57 = add i1 0, 1
	store i1 %var57, i1* @varlogica
	%var62 = add i1 0, 1
	store i1 %var62, i1* @varlogica2
	%var67 = add i1 0, 0
	store i1 %var67, i1* @varlogica3
	; ENTRO AL OR
	; ENTRO AL AND
	%var72 = load i1, i1* @varlogica
	
	br i1 %var72, label %etiqTrueCondicionIzquierdaAnd74, label %etiqFinAnd74
	
	etiqTrueCondicionIzquierdaAnd74:
	%var73 = load i1, i1* @varlogica2
	
	br label %etiqFinAnd74
	etiqFinAnd74:
	
	br i1 %var73, label %etiqFinOr76, label %etiqFalseCondicionIzquierdaOr76
	
	
	etiqFalseCondicionIzquierdaOr76:
	%var75 = load i1, i1* @varlogica3
	
	br label %etiqFinOr76
	
	
	etiqFinOr76:
	;%var75
	br i1 %var75, label %etiqThenIf87, label %etiqThenElse87
	etiqThenIf87:
	%var77 = add i32 0, 5
	%var81 = sitofp i32 %var77 to double
	store double %var81, double* @var5
	%var83 = load double, double* @var5
	%dest84 = call i32 (i8*, ...) @printf(i8* getelementptr([5 x i8], [5 x i8]* @.float, i32 0, i32 0), double %var83)
	br label %etiqEndIf87
	etiqThenElse87:
	%dest86 = call i32 @puts(i8* getelementptr ([5 x i8], [5 x i8] * @str85, i32 0, i32 0))
	br label %etiqEndIf87
	etiqEndIf87:
	%var88 = load double, double* @var5
	%dest89 = call i32 (i8*, ...) @printf(i8* getelementptr([5 x i8], [5 x i8]* @.float, i32 0, i32 0), double %var88)
	
	ret i32 0
}